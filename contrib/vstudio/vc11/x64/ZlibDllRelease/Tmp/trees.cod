; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	_dist_code
PUBLIC	_length_code
static_bl_desc DQ 0000000000000000H
	DQ	FLAT:extra_blbits
	DD	00H
	DD	013H
	DD	07H
	ORG $+4
static_d_desc DQ FLAT:static_dtree
	DQ	FLAT:extra_dbits
	DD	00H
	DD	01eH
	DD	0fH
	ORG $+4
static_l_desc DQ FLAT:static_ltree
	DQ	FLAT:extra_lbits
	DD	0101H
	DD	011eH
	DD	0fH
	ORG $+4
_dist_code DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	00H
	DB	00H
	DB	010H
	DB	011H
	DB	012H
	DB	012H
	DB	013H
	DB	013H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
_length_code DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	0aH
	DB	0aH
	DB	0bH
	DB	0bH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01cH
static_dtree DW	00H
	DW	05H
	DW	010H
	DW	05H
	DW	08H
	DW	05H
	DW	018H
	DW	05H
	DW	04H
	DW	05H
	DW	014H
	DW	05H
	DW	0cH
	DW	05H
	DW	01cH
	DW	05H
	DW	02H
	DW	05H
	DW	012H
	DW	05H
	DW	0aH
	DW	05H
	DW	01aH
	DW	05H
	DW	06H
	DW	05H
	DW	016H
	DW	05H
	DW	0eH
	DW	05H
	DW	01eH
	DW	05H
	DW	01H
	DW	05H
	DW	011H
	DW	05H
	DW	09H
	DW	05H
	DW	019H
	DW	05H
	DW	05H
	DW	05H
	DW	015H
	DW	05H
	DW	0dH
	DW	05H
	DW	01dH
	DW	05H
	DW	03H
	DW	05H
	DW	013H
	DW	05H
	DW	0bH
	DW	05H
	DW	01bH
	DW	05H
	DW	07H
	DW	05H
	DW	017H
	DW	05H
	ORG $+8
static_ltree DW	0cH
	DW	08H
	DW	08cH
	DW	08H
	DW	04cH
	DW	08H
	DW	0ccH
	DW	08H
	DW	02cH
	DW	08H
	DW	0acH
	DW	08H
	DW	06cH
	DW	08H
	DW	0ecH
	DW	08H
	DW	01cH
	DW	08H
	DW	09cH
	DW	08H
	DW	05cH
	DW	08H
	DW	0dcH
	DW	08H
	DW	03cH
	DW	08H
	DW	0bcH
	DW	08H
	DW	07cH
	DW	08H
	DW	0fcH
	DW	08H
	DW	02H
	DW	08H
	DW	082H
	DW	08H
	DW	042H
	DW	08H
	DW	0c2H
	DW	08H
	DW	022H
	DW	08H
	DW	0a2H
	DW	08H
	DW	062H
	DW	08H
	DW	0e2H
	DW	08H
	DW	012H
	DW	08H
	DW	092H
	DW	08H
	DW	052H
	DW	08H
	DW	0d2H
	DW	08H
	DW	032H
	DW	08H
	DW	0b2H
	DW	08H
	DW	072H
	DW	08H
	DW	0f2H
	DW	08H
	DW	0aH
	DW	08H
	DW	08aH
	DW	08H
	DW	04aH
	DW	08H
	DW	0caH
	DW	08H
	DW	02aH
	DW	08H
	DW	0aaH
	DW	08H
	DW	06aH
	DW	08H
	DW	0eaH
	DW	08H
	DW	01aH
	DW	08H
	DW	09aH
	DW	08H
	DW	05aH
	DW	08H
	DW	0daH
	DW	08H
	DW	03aH
	DW	08H
	DW	0baH
	DW	08H
	DW	07aH
	DW	08H
	DW	0faH
	DW	08H
	DW	06H
	DW	08H
	DW	086H
	DW	08H
	DW	046H
	DW	08H
	DW	0c6H
	DW	08H
	DW	026H
	DW	08H
	DW	0a6H
	DW	08H
	DW	066H
	DW	08H
	DW	0e6H
	DW	08H
	DW	016H
	DW	08H
	DW	096H
	DW	08H
	DW	056H
	DW	08H
	DW	0d6H
	DW	08H
	DW	036H
	DW	08H
	DW	0b6H
	DW	08H
	DW	076H
	DW	08H
	DW	0f6H
	DW	08H
	DW	0eH
	DW	08H
	DW	08eH
	DW	08H
	DW	04eH
	DW	08H
	DW	0ceH
	DW	08H
	DW	02eH
	DW	08H
	DW	0aeH
	DW	08H
	DW	06eH
	DW	08H
	DW	0eeH
	DW	08H
	DW	01eH
	DW	08H
	DW	09eH
	DW	08H
	DW	05eH
	DW	08H
	DW	0deH
	DW	08H
	DW	03eH
	DW	08H
	DW	0beH
	DW	08H
	DW	07eH
	DW	08H
	DW	0feH
	DW	08H
	DW	01H
	DW	08H
	DW	081H
	DW	08H
	DW	041H
	DW	08H
	DW	0c1H
	DW	08H
	DW	021H
	DW	08H
	DW	0a1H
	DW	08H
	DW	061H
	DW	08H
	DW	0e1H
	DW	08H
	DW	011H
	DW	08H
	DW	091H
	DW	08H
	DW	051H
	DW	08H
	DW	0d1H
	DW	08H
	DW	031H
	DW	08H
	DW	0b1H
	DW	08H
	DW	071H
	DW	08H
	DW	0f1H
	DW	08H
	DW	09H
	DW	08H
	DW	089H
	DW	08H
	DW	049H
	DW	08H
	DW	0c9H
	DW	08H
	DW	029H
	DW	08H
	DW	0a9H
	DW	08H
	DW	069H
	DW	08H
	DW	0e9H
	DW	08H
	DW	019H
	DW	08H
	DW	099H
	DW	08H
	DW	059H
	DW	08H
	DW	0d9H
	DW	08H
	DW	039H
	DW	08H
	DW	0b9H
	DW	08H
	DW	079H
	DW	08H
	DW	0f9H
	DW	08H
	DW	05H
	DW	08H
	DW	085H
	DW	08H
	DW	045H
	DW	08H
	DW	0c5H
	DW	08H
	DW	025H
	DW	08H
	DW	0a5H
	DW	08H
	DW	065H
	DW	08H
	DW	0e5H
	DW	08H
	DW	015H
	DW	08H
	DW	095H
	DW	08H
	DW	055H
	DW	08H
	DW	0d5H
	DW	08H
	DW	035H
	DW	08H
	DW	0b5H
	DW	08H
	DW	075H
	DW	08H
	DW	0f5H
	DW	08H
	DW	0dH
	DW	08H
	DW	08dH
	DW	08H
	DW	04dH
	DW	08H
	DW	0cdH
	DW	08H
	DW	02dH
	DW	08H
	DW	0adH
	DW	08H
	DW	06dH
	DW	08H
	DW	0edH
	DW	08H
	DW	01dH
	DW	08H
	DW	09dH
	DW	08H
	DW	05dH
	DW	08H
	DW	0ddH
	DW	08H
	DW	03dH
	DW	08H
	DW	0bdH
	DW	08H
	DW	07dH
	DW	08H
	DW	0fdH
	DW	08H
	DW	013H
	DW	09H
	DW	0113H
	DW	09H
	DW	093H
	DW	09H
	DW	0193H
	DW	09H
	DW	053H
	DW	09H
	DW	0153H
	DW	09H
	DW	0d3H
	DW	09H
	DW	01d3H
	DW	09H
	DW	033H
	DW	09H
	DW	0133H
	DW	09H
	DW	0b3H
	DW	09H
	DW	01b3H
	DW	09H
	DW	073H
	DW	09H
	DW	0173H
	DW	09H
	DW	0f3H
	DW	09H
	DW	01f3H
	DW	09H
	DW	0bH
	DW	09H
	DW	010bH
	DW	09H
	DW	08bH
	DW	09H
	DW	018bH
	DW	09H
	DW	04bH
	DW	09H
	DW	014bH
	DW	09H
	DW	0cbH
	DW	09H
	DW	01cbH
	DW	09H
	DW	02bH
	DW	09H
	DW	012bH
	DW	09H
	DW	0abH
	DW	09H
	DW	01abH
	DW	09H
	DW	06bH
	DW	09H
	DW	016bH
	DW	09H
	DW	0ebH
	DW	09H
	DW	01ebH
	DW	09H
	DW	01bH
	DW	09H
	DW	011bH
	DW	09H
	DW	09bH
	DW	09H
	DW	019bH
	DW	09H
	DW	05bH
	DW	09H
	DW	015bH
	DW	09H
	DW	0dbH
	DW	09H
	DW	01dbH
	DW	09H
	DW	03bH
	DW	09H
	DW	013bH
	DW	09H
	DW	0bbH
	DW	09H
	DW	01bbH
	DW	09H
	DW	07bH
	DW	09H
	DW	017bH
	DW	09H
	DW	0fbH
	DW	09H
	DW	01fbH
	DW	09H
	DW	07H
	DW	09H
	DW	0107H
	DW	09H
	DW	087H
	DW	09H
	DW	0187H
	DW	09H
	DW	047H
	DW	09H
	DW	0147H
	DW	09H
	DW	0c7H
	DW	09H
	DW	01c7H
	DW	09H
	DW	027H
	DW	09H
	DW	0127H
	DW	09H
	DW	0a7H
	DW	09H
	DW	01a7H
	DW	09H
	DW	067H
	DW	09H
	DW	0167H
	DW	09H
	DW	0e7H
	DW	09H
	DW	01e7H
	DW	09H
	DW	017H
	DW	09H
	DW	0117H
	DW	09H
	DW	097H
	DW	09H
	DW	0197H
	DW	09H
	DW	057H
	DW	09H
	DW	0157H
	DW	09H
	DW	0d7H
	DW	09H
	DW	01d7H
	DW	09H
	DW	037H
	DW	09H
	DW	0137H
	DW	09H
	DW	0b7H
	DW	09H
	DW	01b7H
	DW	09H
	DW	077H
	DW	09H
	DW	0177H
	DW	09H
	DW	0f7H
	DW	09H
	DW	01f7H
	DW	09H
	DW	0fH
	DW	09H
	DW	010fH
	DW	09H
	DW	08fH
	DW	09H
	DW	018fH
	DW	09H
	DW	04fH
	DW	09H
	DW	014fH
	DW	09H
	DW	0cfH
	DW	09H
	DW	01cfH
	DW	09H
	DW	02fH
	DW	09H
	DW	012fH
	DW	09H
	DW	0afH
	DW	09H
	DW	01afH
	DW	09H
	DW	06fH
	DW	09H
	DW	016fH
	DW	09H
	DW	0efH
	DW	09H
	DW	01efH
	DW	09H
	DW	01fH
	DW	09H
	DW	011fH
	DW	09H
	DW	09fH
	DW	09H
	DW	019fH
	DW	09H
	DW	05fH
	DW	09H
	DW	015fH
	DW	09H
	DW	0dfH
	DW	09H
	DW	01dfH
	DW	09H
	DW	03fH
	DW	09H
	DW	013fH
	DW	09H
	DW	0bfH
	DW	09H
	DW	01bfH
	DW	09H
	DW	07fH
	DW	09H
	DW	017fH
	DW	09H
	DW	0ffH
	DW	09H
	DW	01ffH
	DW	09H
	DW	00H
	DW	07H
	DW	040H
	DW	07H
	DW	020H
	DW	07H
	DW	060H
	DW	07H
	DW	010H
	DW	07H
	DW	050H
	DW	07H
	DW	030H
	DW	07H
	DW	070H
	DW	07H
	DW	08H
	DW	07H
	DW	048H
	DW	07H
	DW	028H
	DW	07H
	DW	068H
	DW	07H
	DW	018H
	DW	07H
	DW	058H
	DW	07H
	DW	038H
	DW	07H
	DW	078H
	DW	07H
	DW	04H
	DW	07H
	DW	044H
	DW	07H
	DW	024H
	DW	07H
	DW	064H
	DW	07H
	DW	014H
	DW	07H
	DW	054H
	DW	07H
	DW	034H
	DW	07H
	DW	074H
	DW	07H
	DW	03H
	DW	08H
	DW	083H
	DW	08H
	DW	043H
	DW	08H
	DW	0c3H
	DW	08H
	DW	023H
	DW	08H
	DW	0a3H
	DW	08H
	DW	063H
	DW	08H
	DW	0e3H
	DW	08H
extra_dbits DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	06H
	DD	06H
	DD	07H
	DD	07H
	DD	08H
	DD	08H
	DD	09H
	DD	09H
	DD	0aH
	DD	0aH
	DD	0bH
	DD	0bH
	DD	0cH
	DD	0cH
	DD	0dH
	DD	0dH
	ORG $+8
base_length DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	08H
	DD	0aH
	DD	0cH
	DD	0eH
	DD	010H
	DD	014H
	DD	018H
	DD	01cH
	DD	020H
	DD	028H
	DD	030H
	DD	038H
	DD	040H
	DD	050H
	DD	060H
	DD	070H
	DD	080H
	DD	0a0H
	DD	0c0H
	DD	0e0H
	DD	00H
	ORG $+12
extra_blbits DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	03H
	DD	07H
	ORG $+4
extra_lbits DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	05H
	DD	05H
	DD	00H
	ORG $+12
bl_order DB	010H
	DB	011H
	DB	012H
	DB	00H
	DB	08H
	DB	07H
	DB	09H
	DB	06H
	DB	0aH
	DB	05H
	DB	0bH
	DB	04H
	DB	0cH
	DB	03H
	DB	0dH
	DB	02H
	DB	0eH
	DB	01H
	DB	0fH
	ORG $+13
base_dist DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	06H
	DD	08H
	DD	0cH
	DD	010H
	DD	018H
	DD	020H
	DD	030H
	DD	040H
	DD	060H
	DD	080H
	DD	0c0H
	DD	0100H
	DD	0180H
	DD	0200H
	DD	0300H
	DD	0400H
	DD	0600H
	DD	0800H
	DD	0c00H
	DD	01000H
	DD	01800H
	DD	02000H
	DD	03000H
	DD	04000H
	DD	06000H
PUBLIC	_tr_init
PUBLIC	_tr_flush_block
PUBLIC	_tr_align
PUBLIC	_tr_stored_block
PUBLIC	_tr_flush_bits
;	COMDAT pdata
pdata	SEGMENT
$pdata$copy_block DD imagerel copy_block
	DD	imagerel copy_block+164
	DD	imagerel $unwind$copy_block
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$compress_block DD imagerel compress_block
	DD	imagerel compress_block+8
	DD	imagerel $unwind$compress_block
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$compress_block DD imagerel compress_block+8
	DD	imagerel compress_block+43
	DD	imagerel $chain$1$compress_block
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$compress_block DD imagerel compress_block+43
	DD	imagerel compress_block+917
	DD	imagerel $chain$4$compress_block
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$compress_block DD imagerel compress_block+917
	DD	imagerel compress_block+949
	DD	imagerel $chain$5$compress_block
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$compress_block DD imagerel compress_block+949
	DD	imagerel compress_block+1089
	DD	imagerel $chain$6$compress_block
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$send_all_trees DD imagerel send_all_trees
	DD	imagerel send_all_trees+634
	DD	imagerel $unwind$send_all_trees
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$build_bl_tree DD imagerel build_bl_tree
	DD	imagerel build_bl_tree+197
	DD	imagerel $unwind$build_bl_tree
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$send_tree DD imagerel send_tree
	DD	imagerel send_tree+53
	DD	imagerel $unwind$send_tree
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$send_tree DD imagerel send_tree+53
	DD	imagerel send_tree+1404
	DD	imagerel $chain$3$send_tree
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$send_tree DD imagerel send_tree+1404
	DD	imagerel send_tree+1407
	DD	imagerel $chain$4$send_tree
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$scan_tree DD imagerel scan_tree
	DD	imagerel scan_tree+233
	DD	imagerel $unwind$scan_tree
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$build_tree DD imagerel build_tree
	DD	imagerel build_tree+590
	DD	imagerel $unwind$build_tree
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gen_codes DD imagerel gen_codes
	DD	imagerel gen_codes+123
	DD	imagerel $unwind$gen_codes
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gen_bitlen DD imagerel gen_bitlen
	DD	imagerel gen_bitlen+116
	DD	imagerel $unwind$gen_bitlen
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$gen_bitlen DD imagerel gen_bitlen+116
	DD	imagerel gen_bitlen+318
	DD	imagerel $chain$2$gen_bitlen
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$gen_bitlen DD imagerel gen_bitlen+318
	DD	imagerel gen_bitlen+522
	DD	imagerel $chain$3$gen_bitlen
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$pqdownheap DD imagerel pqdownheap
	DD	imagerel pqdownheap+39
	DD	imagerel $unwind$pqdownheap
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$pqdownheap DD imagerel pqdownheap+39
	DD	imagerel pqdownheap+201
	DD	imagerel $chain$0$pqdownheap
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$pqdownheap DD imagerel pqdownheap+201
	DD	imagerel pqdownheap+223
	DD	imagerel $chain$2$pqdownheap
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$pqdownheap DD imagerel pqdownheap+223
	DD	imagerel pqdownheap+240
	DD	imagerel $chain$3$pqdownheap
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_tr_flush_block DD imagerel $LN20
	DD	imagerel $LN20+549
	DD	imagerel $unwind$_tr_flush_block
;	COMDAT xdata
xdata	SEGMENT
$unwind$_tr_flush_block DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$pqdownheap DD 021H
	DD	imagerel pqdownheap
	DD	imagerel pqdownheap+39
	DD	imagerel $unwind$pqdownheap
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$pqdownheap DD 020021H
	DD	026400H
	DD	imagerel pqdownheap
	DD	imagerel pqdownheap+39
	DD	imagerel $unwind$pqdownheap
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$pqdownheap DD 020521H
	DD	026405H
	DD	imagerel pqdownheap
	DD	imagerel pqdownheap+39
	DD	imagerel $unwind$pqdownheap
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$pqdownheap DD 030601H
	DD	033406H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$gen_bitlen DD 021H
	DD	imagerel gen_bitlen
	DD	imagerel gen_bitlen+116
	DD	imagerel $unwind$gen_bitlen
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$gen_bitlen DD 061a21H
	DD	0f41aH
	DD	01e40aH
	DD	0bd405H
	DD	imagerel gen_bitlen
	DD	imagerel gen_bitlen+116
	DD	imagerel $unwind$gen_bitlen
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_bitlen DD 060b01H
	DD	0c007120bH
	DD	060047005H
	DD	030025003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_codes DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$build_tree DD 0c1e01H
	DD	0b741eH
	DD	0a641eH
	DD	09541eH
	DD	08341eH
	DD	0f01a321eH
	DD	0c016e018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$scan_tree DD 040a01H
	DD	02740aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$send_tree DD 021H
	DD	imagerel send_tree
	DD	imagerel send_tree+53
	DD	imagerel $unwind$send_tree
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$send_tree DD 081421H
	DD	06f414H
	DD	05e40fH
	DD	04740aH
	DD	036405H
	DD	imagerel send_tree
	DD	imagerel send_tree+53
	DD	imagerel $unwind$send_tree
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$send_tree DD 020301H
	DD	030025003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$build_bl_tree DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$send_all_trees DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$compress_block DD 021H
	DD	imagerel compress_block
	DD	imagerel compress_block+8
	DD	imagerel $unwind$compress_block
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$compress_block DD 021H
	DD	imagerel compress_block+8
	DD	imagerel compress_block+43
	DD	imagerel $chain$1$compress_block
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$compress_block DD 060f21H
	DD	06740fH
	DD	05640aH
	DD	07c405H
	DD	imagerel compress_block+8
	DD	imagerel compress_block+43
	DD	imagerel $chain$1$compress_block
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$compress_block DD 040b21H
	DD	0f40bH
	DD	045405H
	DD	imagerel compress_block
	DD	imagerel compress_block+8
	DD	imagerel $unwind$compress_block
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$compress_block DD 030801H
	DD	0e0040208H
	DD	03002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$copy_block DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
; File d:\workdir\c++source\zlib128\zlib-1.2.8\trees.c
;	COMDAT _tr_flush_bits
_TEXT	SEGMENT
s$ = 8
_tr_flush_bits PROC					; COMDAT

; 885  :     bi_flush(s);

  00000	e9 00 00 00 00	 jmp	 bi_flush
_tr_flush_bits ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\workdir\c++source\zlib128\zlib-1.2.8\trees.c
;	COMDAT _tr_stored_block
_TEXT	SEGMENT
s$ = 8
buf$ = 16
stored_len$ = 24
last$ = 32
_tr_stored_block PROC					; COMDAT

; 870  : {

  00000	4c 8b d1	 mov	 r10, rcx

; 871  :     send_bits(s, (STORED_BLOCK<<1)+last, 3);    /* send block type */

  00003	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  00009	4c 8b da	 mov	 r11, rdx
  0000c	83 f9 0d	 cmp	 ecx, 13
  0000f	7e 68		 jle	 SHORT $LN2@tr_stored_
  00011	41 8b 52 28	 mov	 edx, DWORD PTR [r10+40]
  00015	41 0f b7 c1	 movzx	 eax, r9w
  00019	66 d3 e0	 shl	 ax, cl
  0001c	49 8b 4a 10	 mov	 rcx, QWORD PTR [r10+16]
  00020	66 41 09 82 10
	17 00 00	 or	 WORD PTR [r10+5904], ax
  00028	41 0f b6 82 10
	17 00 00	 movzx	 eax, BYTE PTR [r10+5904]
  00030	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00033	41 ff 42 28	 inc	 DWORD PTR [r10+40]
  00037	41 8b 52 28	 mov	 edx, DWORD PTR [r10+40]
  0003b	49 8b 4a 10	 mov	 rcx, QWORD PTR [r10+16]
  0003f	41 0f b6 82 11
	17 00 00	 movzx	 eax, BYTE PTR [r10+5905]
  00047	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  0004a	41 ff 42 28	 inc	 DWORD PTR [r10+40]
  0004e	b9 10 00 00 00	 mov	 ecx, 16
  00053	41 2a 8a 14 17
	00 00		 sub	 cl, BYTE PTR [r10+5908]
  0005a	41 83 82 14 17
	00 00 f3	 add	 DWORD PTR [r10+5908], -13

; 872  : #ifdef DEBUG
; 873  :     s->compressed_len = (s->compressed_len + 3 + 7) & (ulg)~7L;
; 874  :     s->compressed_len += (stored_len + 4) << 3;
; 875  : #endif
; 876  :     copy_block(s, buf, (unsigned)stored_len, 1); /* with header */

  00062	49 8b d3	 mov	 rdx, r11
  00065	66 41 d3 e9	 shr	 r9w, cl
  00069	49 8b ca	 mov	 rcx, r10
  0006c	66 45 89 8a 10
	17 00 00	 mov	 WORD PTR [r10+5904], r9w
  00074	e9 00 00 00 00	 jmp	 copy_block
$LN2@tr_stored_:

; 871  :     send_bits(s, (STORED_BLOCK<<1)+last, 3);    /* send block type */

  00079	8d 41 03	 lea	 eax, DWORD PTR [rcx+3]
  0007c	66 41 d3 e1	 shl	 r9w, cl

; 872  : #ifdef DEBUG
; 873  :     s->compressed_len = (s->compressed_len + 3 + 7) & (ulg)~7L;
; 874  :     s->compressed_len += (stored_len + 4) << 3;
; 875  : #endif
; 876  :     copy_block(s, buf, (unsigned)stored_len, 1); /* with header */

  00080	49 8b d3	 mov	 rdx, r11
  00083	66 45 09 8a 10
	17 00 00	 or	 WORD PTR [r10+5904], r9w
  0008b	49 8b ca	 mov	 rcx, r10
  0008e	41 89 82 14 17
	00 00		 mov	 DWORD PTR [r10+5908], eax
  00095	e9 00 00 00 00	 jmp	 copy_block
_tr_stored_block ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\workdir\c++source\zlib128\zlib-1.2.8\trees.c
;	COMDAT _tr_align
_TEXT	SEGMENT
s$ = 8
_tr_align PROC						; COMDAT

; 894  : {

  00000	4c 8b c9	 mov	 r9, rcx

; 895  :     send_bits(s, STATIC_TREES<<1, 3);

  00003	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  00009	41 bb 10 00 00
	00		 mov	 r11d, 16
  0000f	45 8d 43 f2	 lea	 r8d, QWORD PTR [r11-14]
  00013	83 f9 0d	 cmp	 ecx, 13
  00016	7e 5c		 jle	 SHORT $LN4@tr_align
  00018	41 8b 51 28	 mov	 edx, DWORD PTR [r9+40]
  0001c	41 8b c0	 mov	 eax, r8d
  0001f	66 d3 e0	 shl	 ax, cl
  00022	49 8b 49 10	 mov	 rcx, QWORD PTR [r9+16]
  00026	66 41 09 81 10
	17 00 00	 or	 WORD PTR [r9+5904], ax
  0002e	41 0f b6 81 10
	17 00 00	 movzx	 eax, BYTE PTR [r9+5904]
  00036	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00039	41 ff 41 28	 inc	 DWORD PTR [r9+40]
  0003d	41 8b 51 28	 mov	 edx, DWORD PTR [r9+40]
  00041	49 8b 49 10	 mov	 rcx, QWORD PTR [r9+16]
  00045	41 0f b6 81 11
	17 00 00	 movzx	 eax, BYTE PTR [r9+5905]
  0004d	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00050	41 ff 41 28	 inc	 DWORD PTR [r9+40]
  00054	41 8b cb	 mov	 ecx, r11d
  00057	41 2a 89 14 17
	00 00		 sub	 cl, BYTE PTR [r9+5908]
  0005e	66 41 d3 e8	 shr	 r8w, cl
  00062	41 83 81 14 17
	00 00 f3	 add	 DWORD PTR [r9+5908], -13
  0006a	66 45 89 81 10
	17 00 00	 mov	 WORD PTR [r9+5904], r8w
  00072	eb 16		 jmp	 SHORT $LN3@tr_align
$LN4@tr_align:
  00074	8d 41 03	 lea	 eax, DWORD PTR [rcx+3]
  00077	66 41 d3 e0	 shl	 r8w, cl
  0007b	66 45 09 81 10
	17 00 00	 or	 WORD PTR [r9+5904], r8w
  00083	41 89 81 14 17
	00 00		 mov	 DWORD PTR [r9+5908], eax
$LN3@tr_align:

; 896  :     send_code(s, END_BLOCK, static_ltree);

  0008a	41 8b 89 14 17
	00 00		 mov	 ecx, DWORD PTR [r9+5908]
  00091	45 33 d2	 xor	 r10d, r10d
  00094	83 f9 09	 cmp	 ecx, 9
  00097	7e 65		 jle	 SHORT $LN2@tr_align
  00099	45 8b 41 28	 mov	 r8d, DWORD PTR [r9+40]
  0009d	49 8b 51 10	 mov	 rdx, QWORD PTR [r9+16]
  000a1	41 8b c2	 mov	 eax, r10d
  000a4	66 d3 e0	 shl	 ax, cl
  000a7	66 41 09 81 10
	17 00 00	 or	 WORD PTR [r9+5904], ax
  000af	41 0f b6 81 10
	17 00 00	 movzx	 eax, BYTE PTR [r9+5904]
  000b7	41 88 04 10	 mov	 BYTE PTR [r8+rdx], al
  000bb	41 ff 41 28	 inc	 DWORD PTR [r9+40]
  000bf	45 8b 41 28	 mov	 r8d, DWORD PTR [r9+40]
  000c3	41 0f b6 81 11
	17 00 00	 movzx	 eax, BYTE PTR [r9+5905]
  000cb	49 8b 51 10	 mov	 rdx, QWORD PTR [r9+16]
  000cf	41 88 04 10	 mov	 BYTE PTR [r8+rdx], al
  000d3	45 2a 99 14 17
	00 00		 sub	 r11b, BYTE PTR [r9+5908]
  000da	41 ff 41 28	 inc	 DWORD PTR [r9+40]
  000de	41 83 81 14 17
	00 00 f7	 add	 DWORD PTR [r9+5908], -9
  000e6	41 0f b6 cb	 movzx	 ecx, r11b
  000ea	66 41 d3 ea	 shr	 r10w, cl

; 897  : #ifdef DEBUG
; 898  :     s->compressed_len += 10L; /* 3 for block type, 7 for EOB */
; 899  : #endif
; 900  :     bi_flush(s);

  000ee	49 8b c9	 mov	 rcx, r9
  000f1	66 45 89 91 10
	17 00 00	 mov	 WORD PTR [r9+5904], r10w
  000f9	e9 00 00 00 00	 jmp	 bi_flush
$LN2@tr_align:

; 896  :     send_code(s, END_BLOCK, static_ltree);

  000fe	8d 41 07	 lea	 eax, DWORD PTR [rcx+7]
  00101	66 41 d3 e2	 shl	 r10w, cl

; 897  : #ifdef DEBUG
; 898  :     s->compressed_len += 10L; /* 3 for block type, 7 for EOB */
; 899  : #endif
; 900  :     bi_flush(s);

  00105	49 8b c9	 mov	 rcx, r9
  00108	66 45 09 91 10
	17 00 00	 or	 WORD PTR [r9+5904], r10w
  00110	41 89 81 14 17
	00 00		 mov	 DWORD PTR [r9+5908], eax
  00117	e9 00 00 00 00	 jmp	 bi_flush
_tr_align ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\workdir\c++source\zlib128\zlib-1.2.8\trees.c
;	COMDAT _tr_flush_block
_TEXT	SEGMENT
s$ = 48
buf$ = 56
stored_len$ = 64
last$ = 72
_tr_flush_block PROC					; COMDAT

; 912  : {

$LN20:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	41 8b f9	 mov	 edi, r9d

; 913  :     ulg opt_lenb, static_lenb; /* opt_len and static_len in bytes */
; 914  :     int max_blindex = 0;  /* index of last bit length code of non zero freq */

  00017	45 33 c9	 xor	 r9d, r9d
  0001a	41 8b f0	 mov	 esi, r8d
  0001d	48 8b ea	 mov	 rbp, rdx
  00020	48 8b d9	 mov	 rbx, rcx

; 915  : 
; 916  :     /* Build the Huffman trees unless a stored block is forced */
; 917  :     if (s->level > 0) {

  00023	44 39 89 ac 00
	00 00		 cmp	 DWORD PTR [rcx+172], r9d
  0002a	7e 5a		 jle	 SHORT $LN14@tr_flush_b

; 918  : 
; 919  :         /* Check if the file is binary or text */
; 920  :         if (s->strm->data_type == Z_UNKNOWN)

  0002c	4c 8b 11	 mov	 r10, QWORD PTR [rcx]
  0002f	41 83 7a 48 02	 cmp	 DWORD PTR [r10+72], 2
  00034	75 09		 jne	 SHORT $LN13@tr_flush_b

; 921  :             s->strm->data_type = detect_data_type(s);

  00036	e8 00 00 00 00	 call	 detect_data_type
  0003b	41 89 42 48	 mov	 DWORD PTR [r10+72], eax
$LN13@tr_flush_b:

; 922  : 
; 923  :         /* Construct the literal and distance trees */
; 924  :         build_tree(s, (tree_desc *)(&(s->l_desc)));

  0003f	48 8d 93 40 0b
	00 00		 lea	 rdx, QWORD PTR [rbx+2880]
  00046	48 8b cb	 mov	 rcx, rbx
  00049	e8 00 00 00 00	 call	 build_tree

; 925  :         Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
; 926  :                 s->static_len));
; 927  : 
; 928  :         build_tree(s, (tree_desc *)(&(s->d_desc)));

  0004e	48 8d 93 58 0b
	00 00		 lea	 rdx, QWORD PTR [rbx+2904]
  00055	48 8b cb	 mov	 rcx, rbx
  00058	e8 00 00 00 00	 call	 build_tree

; 929  :         Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
; 930  :                 s->static_len));
; 931  :         /* At this point, opt_len and static_len are the total bit lengths of
; 932  :          * the compressed block data, excluding the tree representations.
; 933  :          */
; 934  : 
; 935  :         /* Build the bit length tree for the above two trees, and get the index
; 936  :          * in bl_order of the last bit length code to send.
; 937  :          */
; 938  :         max_blindex = build_bl_tree(s);

  0005d	48 8b cb	 mov	 rcx, rbx
  00060	e8 00 00 00 00	 call	 build_bl_tree

; 939  : 
; 940  :         /* Determine the best encoding. Compute the block lengths in bytes. */
; 941  :         opt_lenb = (s->opt_len+3+7)>>3;

  00065	8b 8b 00 17 00
	00		 mov	 ecx, DWORD PTR [rbx+5888]

; 942  :         static_lenb = (s->static_len+3+7)>>3;

  0006b	8b 93 04 17 00
	00		 mov	 edx, DWORD PTR [rbx+5892]
  00071	83 c1 0a	 add	 ecx, 10
  00074	83 c2 0a	 add	 edx, 10
  00077	44 8b c8	 mov	 r9d, eax
  0007a	c1 e9 03	 shr	 ecx, 3
  0007d	c1 ea 03	 shr	 edx, 3

; 943  : 
; 944  :         Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
; 945  :                 opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
; 946  :                 s->last_lit));
; 947  : 
; 948  :         if (static_lenb <= opt_lenb) opt_lenb = static_lenb;

  00080	3b d1		 cmp	 edx, ecx
  00082	77 08		 ja	 SHORT $LN11@tr_flush_b

; 949  : 
; 950  :     } else {

  00084	eb 04		 jmp	 SHORT $LN17@tr_flush_b
$LN14@tr_flush_b:

; 951  :         Assert(buf != (char*)0, "lost buf");
; 952  :         opt_lenb = static_lenb = stored_len + 5; /* force a stored block */

  00086	41 8d 50 05	 lea	 edx, DWORD PTR [r8+5]
$LN17@tr_flush_b:
  0008a	8b ca		 mov	 ecx, edx
$LN11@tr_flush_b:

; 953  :     }
; 954  : 
; 955  : #ifdef FORCE_STORED
; 956  :     if (buf != (char*)0) { /* force stored block */
; 957  : #else
; 958  :     if (stored_len+4 <= opt_lenb && buf != (char*)0) {

  0008c	8d 46 04	 lea	 eax, DWORD PTR [rsi+4]
  0008f	3b c1		 cmp	 eax, ecx
  00091	77 1b		 ja	 SHORT $LN10@tr_flush_b
  00093	48 85 ed	 test	 rbp, rbp
  00096	74 16		 je	 SHORT $LN10@tr_flush_b

; 959  :                        /* 4: two words for the lengths */
; 960  : #endif
; 961  :         /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
; 962  :          * Otherwise we can't have processed more than WSIZE input bytes since
; 963  :          * the last block flush, because compression would have been
; 964  :          * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
; 965  :          * transform a block into a stored block.
; 966  :          */
; 967  :         _tr_stored_block(s, buf, stored_len, last);

  00098	44 8b cf	 mov	 r9d, edi
  0009b	44 8b c6	 mov	 r8d, esi
  0009e	48 8b d5	 mov	 rdx, rbp
  000a1	48 8b cb	 mov	 rcx, rbx
  000a4	e8 00 00 00 00	 call	 _tr_stored_block
  000a9	e9 51 01 00 00	 jmp	 $LN4@tr_flush_b
$LN10@tr_flush_b:

; 968  : 
; 969  : #ifdef FORCE_STATIC
; 970  :     } else if (static_lenb >= 0) { /* force static trees */
; 971  : #else
; 972  :     } else if (s->strategy == Z_FIXED || static_lenb == opt_lenb) {

  000ae	83 bb b0 00 00
	00 04		 cmp	 DWORD PTR [rbx+176], 4
  000b5	0f 84 b3 00 00
	00		 je	 $LN7@tr_flush_b
  000bb	3b d1		 cmp	 edx, ecx
  000bd	0f 84 ab 00 00
	00		 je	 $LN7@tr_flush_b

; 977  : #ifdef DEBUG
; 978  :         s->compressed_len += 3 + s->static_len;
; 979  : #endif
; 980  :     } else {
; 981  :         send_bits(s, (DYN_TREES<<1)+last, 3);

  000c3	8b 8b 14 17 00
	00		 mov	 ecx, DWORD PTR [rbx+5908]
  000c9	83 f9 0d	 cmp	 ecx, 13
  000cc	7e 5a		 jle	 SHORT $LN3@tr_flush_b
  000ce	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]
  000d1	44 8d 47 04	 lea	 r8d, DWORD PTR [rdi+4]
  000d5	41 0f b7 c0	 movzx	 eax, r8w
  000d9	66 d3 e0	 shl	 ax, cl
  000dc	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  000e0	66 09 83 10 17
	00 00		 or	 WORD PTR [rbx+5904], ax
  000e7	0f b6 83 10 17
	00 00		 movzx	 eax, BYTE PTR [rbx+5904]
  000ee	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  000f1	ff 43 28	 inc	 DWORD PTR [rbx+40]
  000f4	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]
  000f7	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  000fb	0f b6 83 11 17
	00 00		 movzx	 eax, BYTE PTR [rbx+5905]
  00102	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00105	ff 43 28	 inc	 DWORD PTR [rbx+40]
  00108	b9 10 00 00 00	 mov	 ecx, 16
  0010d	2a 8b 14 17 00
	00		 sub	 cl, BYTE PTR [rbx+5908]
  00113	66 41 d3 e8	 shr	 r8w, cl
  00117	83 83 14 17 00
	00 f3		 add	 DWORD PTR [rbx+5908], -13
  0011e	66 44 89 83 10
	17 00 00	 mov	 WORD PTR [rbx+5904], r8w
  00126	eb 16		 jmp	 SHORT $LN2@tr_flush_b
$LN3@tr_flush_b:
  00128	8d 47 04	 lea	 eax, DWORD PTR [rdi+4]
  0012b	66 d3 e0	 shl	 ax, cl
  0012e	66 09 83 10 17
	00 00		 or	 WORD PTR [rbx+5904], ax
  00135	8d 41 03	 lea	 eax, DWORD PTR [rcx+3]
  00138	89 83 14 17 00
	00		 mov	 DWORD PTR [rbx+5908], eax
$LN2@tr_flush_b:

; 982  :         send_all_trees(s, s->l_desc.max_code+1, s->d_desc.max_code+1,
; 983  :                        max_blindex+1);

  0013e	44 8b 83 60 0b
	00 00		 mov	 r8d, DWORD PTR [rbx+2912]
  00145	8b 93 48 0b 00
	00		 mov	 edx, DWORD PTR [rbx+2888]
  0014b	41 ff c1	 inc	 r9d
  0014e	41 ff c0	 inc	 r8d
  00151	ff c2		 inc	 edx
  00153	48 8b cb	 mov	 rcx, rbx
  00156	e8 00 00 00 00	 call	 send_all_trees

; 984  :         compress_block(s, (const ct_data *)s->dyn_ltree,
; 985  :                        (const ct_data *)s->dyn_dtree);

  0015b	4c 8d 83 b0 09
	00 00		 lea	 r8, QWORD PTR [rbx+2480]
  00162	48 8d 93 bc 00
	00 00		 lea	 rdx, QWORD PTR [rbx+188]
  00169	e9 89 00 00 00	 jmp	 $LN18@tr_flush_b
$LN7@tr_flush_b:

; 973  : #endif
; 974  :         send_bits(s, (STATIC_TREES<<1)+last, 3);

  0016e	8b 8b 14 17 00
	00		 mov	 ecx, DWORD PTR [rbx+5908]
  00174	83 f9 0d	 cmp	 ecx, 13
  00177	7e 5a		 jle	 SHORT $LN6@tr_flush_b
  00179	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]
  0017c	44 8d 47 02	 lea	 r8d, DWORD PTR [rdi+2]
  00180	41 0f b7 c0	 movzx	 eax, r8w
  00184	66 d3 e0	 shl	 ax, cl
  00187	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  0018b	66 09 83 10 17
	00 00		 or	 WORD PTR [rbx+5904], ax
  00192	0f b6 83 10 17
	00 00		 movzx	 eax, BYTE PTR [rbx+5904]
  00199	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  0019c	ff 43 28	 inc	 DWORD PTR [rbx+40]
  0019f	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]
  001a2	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  001a6	0f b6 83 11 17
	00 00		 movzx	 eax, BYTE PTR [rbx+5905]
  001ad	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  001b0	ff 43 28	 inc	 DWORD PTR [rbx+40]
  001b3	b9 10 00 00 00	 mov	 ecx, 16
  001b8	2a 8b 14 17 00
	00		 sub	 cl, BYTE PTR [rbx+5908]
  001be	66 41 d3 e8	 shr	 r8w, cl
  001c2	83 83 14 17 00
	00 f3		 add	 DWORD PTR [rbx+5908], -13
  001c9	66 44 89 83 10
	17 00 00	 mov	 WORD PTR [rbx+5904], r8w
  001d1	eb 16		 jmp	 SHORT $LN5@tr_flush_b
$LN6@tr_flush_b:
  001d3	8d 47 02	 lea	 eax, DWORD PTR [rdi+2]
  001d6	66 d3 e0	 shl	 ax, cl
  001d9	66 09 83 10 17
	00 00		 or	 WORD PTR [rbx+5904], ax
  001e0	8d 41 03	 lea	 eax, DWORD PTR [rcx+3]
  001e3	89 83 14 17 00
	00		 mov	 DWORD PTR [rbx+5908], eax
$LN5@tr_flush_b:

; 975  :         compress_block(s, (const ct_data *)static_ltree,
; 976  :                        (const ct_data *)static_dtree);

  001e9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:static_dtree
  001f0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:static_ltree
$LN18@tr_flush_b:
  001f7	48 8b cb	 mov	 rcx, rbx
  001fa	e8 00 00 00 00	 call	 compress_block
$LN4@tr_flush_b:

; 986  : #ifdef DEBUG
; 987  :         s->compressed_len += 3 + s->opt_len;
; 988  : #endif
; 989  :     }
; 990  :     Assert (s->compressed_len == s->bits_sent, "bad compressed size");
; 991  :     /* The above check is made mod 2^32, for files larger than 512 MB
; 992  :      * and uLong implemented on 32 bits.
; 993  :      */
; 994  :     init_block(s);

  001ff	48 8b cb	 mov	 rcx, rbx
  00202	e8 00 00 00 00	 call	 init_block

; 995  : 
; 996  :     if (last) {

  00207	85 ff		 test	 edi, edi
  00209	74 05		 je	 SHORT $LN1@tr_flush_b

; 997  :         bi_windup(s);

  0020b	e8 00 00 00 00	 call	 bi_windup
$LN1@tr_flush_b:

; 998  : #ifdef DEBUG
; 999  :         s->compressed_len += 7;  /* align on byte boundary */
; 1000 : #endif
; 1001 :     }
; 1002 :     Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
; 1003 :            s->compressed_len-7*last));
; 1004 : }

  00210	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00215	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0021a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0021f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00223	5f		 pop	 rdi
  00224	c3		 ret	 0
_tr_flush_block ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\workdir\c++source\zlib128\zlib-1.2.8\trees.c
;	COMDAT _tr_init
_TEXT	SEGMENT
s$ = 8
_tr_init PROC						; COMDAT

; 384  :     tr_static_init();
; 385  : 
; 386  :     s->l_desc.dyn_tree = s->dyn_ltree;

  00000	48 8d 81 bc 00
	00 00		 lea	 rax, QWORD PTR [rcx+188]
  00007	48 89 81 40 0b
	00 00		 mov	 QWORD PTR [rcx+2880], rax

; 387  :     s->l_desc.stat_desc = &static_l_desc;

  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:static_l_desc
  00015	48 89 81 50 0b
	00 00		 mov	 QWORD PTR [rcx+2896], rax

; 388  : 
; 389  :     s->d_desc.dyn_tree = s->dyn_dtree;

  0001c	48 8d 81 b0 09
	00 00		 lea	 rax, QWORD PTR [rcx+2480]
  00023	48 89 81 58 0b
	00 00		 mov	 QWORD PTR [rcx+2904], rax

; 390  :     s->d_desc.stat_desc = &static_d_desc;

  0002a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:static_d_desc
  00031	48 89 81 68 0b
	00 00		 mov	 QWORD PTR [rcx+2920], rax

; 391  : 
; 392  :     s->bl_desc.dyn_tree = s->bl_tree;

  00038	48 8d 81 a4 0a
	00 00		 lea	 rax, QWORD PTR [rcx+2724]
  0003f	48 89 81 70 0b
	00 00		 mov	 QWORD PTR [rcx+2928], rax

; 393  :     s->bl_desc.stat_desc = &static_bl_desc;

  00046	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:static_bl_desc
  0004d	48 89 81 80 0b
	00 00		 mov	 QWORD PTR [rcx+2944], rax

; 394  : 
; 395  :     s->bi_buf = 0;

  00054	33 c0		 xor	 eax, eax
  00056	66 89 81 10 17
	00 00		 mov	 WORD PTR [rcx+5904], ax

; 396  :     s->bi_valid = 0;

  0005d	89 81 14 17 00
	00		 mov	 DWORD PTR [rcx+5908], eax

; 397  : #ifdef DEBUG
; 398  :     s->compressed_len = 0L;
; 399  :     s->bits_sent = 0L;
; 400  : #endif
; 401  : 
; 402  :     /* Initialize the first block of the first file: */
; 403  :     init_block(s);

  00063	e9 00 00 00 00	 jmp	 init_block
_tr_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\workdir\c++source\zlib128\zlib-1.2.8\trees.c
;	COMDAT tr_static_init
_TEXT	SEGMENT
tr_static_init PROC					; COMDAT

; 236  : #if defined(GEN_TREES_H) || !defined(STDC)
; 237  :     static int static_init_done = 0;
; 238  :     int n;        /* iterates over tree elements */
; 239  :     int bits;     /* bit counter */
; 240  :     int length;   /* length value */
; 241  :     int code;     /* code value */
; 242  :     int dist;     /* distance index */
; 243  :     ush bl_count[MAX_BITS+1];
; 244  :     /* number of codes at each bit length for an optimal tree */
; 245  : 
; 246  :     if (static_init_done) return;
; 247  : 
; 248  :     /* For some embedded targets, global variables are not initialized: */
; 249  : #ifdef NO_INIT_GLOBAL_POINTERS
; 250  :     static_l_desc.static_tree = static_ltree;
; 251  :     static_l_desc.extra_bits = extra_lbits;
; 252  :     static_d_desc.static_tree = static_dtree;
; 253  :     static_d_desc.extra_bits = extra_dbits;
; 254  :     static_bl_desc.extra_bits = extra_blbits;
; 255  : #endif
; 256  : 
; 257  :     /* Initialize the mapping length (0..255) -> length code (0..28) */
; 258  :     length = 0;
; 259  :     for (code = 0; code < LENGTH_CODES-1; code++) {
; 260  :         base_length[code] = length;
; 261  :         for (n = 0; n < (1<<extra_lbits[code]); n++) {
; 262  :             _length_code[length++] = (uch)code;
; 263  :         }
; 264  :     }
; 265  :     Assert (length == 256, "tr_static_init: length != 256");
; 266  :     /* Note that the length 255 (match length 258) can be represented
; 267  :      * in two different ways: code 284 + 5 bits or code 285, so we
; 268  :      * overwrite length_code[255] to use the best encoding:
; 269  :      */
; 270  :     _length_code[length-1] = (uch)code;
; 271  : 
; 272  :     /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
; 273  :     dist = 0;
; 274  :     for (code = 0 ; code < 16; code++) {
; 275  :         base_dist[code] = dist;
; 276  :         for (n = 0; n < (1<<extra_dbits[code]); n++) {
; 277  :             _dist_code[dist++] = (uch)code;
; 278  :         }
; 279  :     }
; 280  :     Assert (dist == 256, "tr_static_init: dist != 256");
; 281  :     dist >>= 7; /* from now on, all distances are divided by 128 */
; 282  :     for ( ; code < D_CODES; code++) {
; 283  :         base_dist[code] = dist << 7;
; 284  :         for (n = 0; n < (1<<(extra_dbits[code]-7)); n++) {
; 285  :             _dist_code[256 + dist++] = (uch)code;
; 286  :         }
; 287  :     }
; 288  :     Assert (dist == 256, "tr_static_init: 256+dist != 512");
; 289  : 
; 290  :     /* Construct the codes of the static literal tree */
; 291  :     for (bits = 0; bits <= MAX_BITS; bits++) bl_count[bits] = 0;
; 292  :     n = 0;
; 293  :     while (n <= 143) static_ltree[n++].Len = 8, bl_count[8]++;
; 294  :     while (n <= 255) static_ltree[n++].Len = 9, bl_count[9]++;
; 295  :     while (n <= 279) static_ltree[n++].Len = 7, bl_count[7]++;
; 296  :     while (n <= 287) static_ltree[n++].Len = 8, bl_count[8]++;
; 297  :     /* Codes 286 and 287 do not exist, but we must include them in the
; 298  :      * tree construction to get a canonical Huffman tree (longest code
; 299  :      * all ones)
; 300  :      */
; 301  :     gen_codes((ct_data *)static_ltree, L_CODES+1, bl_count);
; 302  : 
; 303  :     /* The static distance tree is trivial: */
; 304  :     for (n = 0; n < D_CODES; n++) {
; 305  :         static_dtree[n].Len = 5;
; 306  :         static_dtree[n].Code = bi_reverse((unsigned)n, 5);
; 307  :     }
; 308  :     static_init_done = 1;
; 309  : 
; 310  : #  ifdef GEN_TREES_H
; 311  :     gen_trees_header();
; 312  : #  endif
; 313  : #endif /* defined(GEN_TREES_H) || !defined(STDC) */
; 314  : }

  00000	c2 00 00	 ret	 0
tr_static_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\workdir\c++source\zlib128\zlib-1.2.8\trees.c
;	COMDAT init_block
_TEXT	SEGMENT
s$ = 8
init_block PROC						; COMDAT

; 412  :     int n; /* iterates over tree elements */
; 413  : 
; 414  :     /* Initialize the trees. */
; 415  :     for (n = 0; n < L_CODES;  n++) s->dyn_ltree[n].Freq = 0;

  00000	48 8d 81 bc 00
	00 00		 lea	 rax, QWORD PTR [rcx+188]
  00007	ba 1e 01 00 00	 mov	 edx, 286		; 0000011eH
  0000c	45 33 c0	 xor	 r8d, r8d
  0000f	90		 npad	 1
$LL9@init_block:
  00010	66 44 89 00	 mov	 WORD PTR [rax], r8w
  00014	48 8d 40 04	 lea	 rax, QWORD PTR [rax+4]
  00018	48 ff ca	 dec	 rdx
  0001b	75 f3		 jne	 SHORT $LL9@init_block

; 416  :     for (n = 0; n < D_CODES;  n++) s->dyn_dtree[n].Freq = 0;

  0001d	48 8d 81 b0 09
	00 00		 lea	 rax, QWORD PTR [rcx+2480]
  00024	ba 1e 00 00 00	 mov	 edx, 30
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL6@init_block:
  00030	66 44 89 00	 mov	 WORD PTR [rax], r8w
  00034	48 8d 40 04	 lea	 rax, QWORD PTR [rax+4]
  00038	48 ff ca	 dec	 rdx
  0003b	75 f3		 jne	 SHORT $LL6@init_block

; 417  :     for (n = 0; n < BL_CODES; n++) s->bl_tree[n].Freq = 0;

  0003d	48 8d 81 a4 0a
	00 00		 lea	 rax, QWORD PTR [rcx+2724]
  00044	ba 13 00 00 00	 mov	 edx, 19
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL3@init_block:
  00050	66 44 89 00	 mov	 WORD PTR [rax], r8w
  00054	48 8d 40 04	 lea	 rax, QWORD PTR [rax+4]
  00058	48 ff ca	 dec	 rdx
  0005b	75 f3		 jne	 SHORT $LL3@init_block

; 418  : 
; 419  :     s->dyn_ltree[END_BLOCK].Freq = 1;

  0005d	b8 01 00 00 00	 mov	 eax, 1

; 420  :     s->opt_len = s->static_len = 0L;

  00062	4c 89 81 00 17
	00 00		 mov	 QWORD PTR [rcx+5888], r8

; 421  :     s->last_lit = s->matches = 0;

  00069	44 89 81 08 17
	00 00		 mov	 DWORD PTR [rcx+5896], r8d
  00070	66 89 81 bc 04
	00 00		 mov	 WORD PTR [rcx+1212], ax
  00077	44 89 81 f4 16
	00 00		 mov	 DWORD PTR [rcx+5876], r8d

; 422  : }

  0007e	c3		 ret	 0
init_block ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\workdir\c++source\zlib128\zlib-1.2.8\trees.c
;	COMDAT pqdownheap
_TEXT	SEGMENT
s$ = 16
tree$ = 24
k$ = 32
pqdownheap PROC						; COMDAT

; 457  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi

; 458  :     int v = s->heap[k];

  00006	49 63 c0	 movsxd	 rax, r8d

; 459  :     int j = k << 1;  /* left son of k */

  00009	47 8d 0c 00	 lea	 r9d, DWORD PTR [r8+r8]
  0000d	48 8b da	 mov	 rbx, rdx
  00010	48 63 bc 81 a8
	0b 00 00	 movsxd	 rdi, DWORD PTR [rcx+rax*4+2984]

; 460  :     while (j <= s->heap_len) {

  00018	8b 81 9c 14 00
	00		 mov	 eax, DWORD PTR [rcx+5276]
  0001e	44 3b c8	 cmp	 r9d, eax
  00021	0f 8f b8 00 00
	00		 jg	 $LN16@pqdownheap
  00027	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
$LN19@pqdownheap:

; 461  :         /* Set j to the smallest of the two sons: */
; 462  :         if (j < s->heap_len &&
; 463  :             smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {

  0002c	7d 3a		 jge	 SHORT $LN4@pqdownheap
  0002e	49 63 c1	 movsxd	 rax, r9d
  00031	4c 63 9c 81 a8
	0b 00 00	 movsxd	 r11, DWORD PTR [rcx+rax*4+2984]
  00039	4c 63 94 81 ac
	0b 00 00	 movsxd	 r10, DWORD PTR [rcx+rax*4+2988]
  00041	42 0f b7 04 93	 movzx	 eax, WORD PTR [rbx+r10*4]
  00046	42 0f b7 14 9b	 movzx	 edx, WORD PTR [rbx+r11*4]
  0004b	66 3b c2	 cmp	 ax, dx
  0004e	72 15		 jb	 SHORT $LN3@pqdownheap
  00050	75 16		 jne	 SHORT $LN4@pqdownheap
  00052	41 0f b6 84 0b
	a4 14 00 00	 movzx	 eax, BYTE PTR [r11+rcx+5284]
  0005b	41 38 84 0a a4
	14 00 00	 cmp	 BYTE PTR [r10+rcx+5284], al
  00063	77 03		 ja	 SHORT $LN4@pqdownheap
$LN3@pqdownheap:

; 464  :             j++;

  00065	41 ff c1	 inc	 r9d
$LN4@pqdownheap:

; 465  :         }
; 466  :         /* Exit if v is smaller than both sons */
; 467  :         if (smaller(tree, v, s->heap[j], s->depth)) break;

  00068	49 63 c1	 movsxd	 rax, r9d
  0006b	4c 63 9c 81 a8
	0b 00 00	 movsxd	 r11, DWORD PTR [rcx+rax*4+2984]
  00073	0f b7 04 bb	 movzx	 eax, WORD PTR [rbx+rdi*4]
  00077	42 0f b7 14 9b	 movzx	 edx, WORD PTR [rbx+r11*4]
  0007c	66 3b c2	 cmp	 ax, dx
  0007f	72 48		 jb	 SHORT $LN14@pqdownheap
  00081	75 12		 jne	 SHORT $LN2@pqdownheap
  00083	41 0f b6 84 0b
	a4 14 00 00	 movzx	 eax, BYTE PTR [r11+rcx+5284]
  0008c	38 84 0f a4 14
	00 00		 cmp	 BYTE PTR [rdi+rcx+5284], al
  00093	76 34		 jbe	 SHORT $LN14@pqdownheap
$LN2@pqdownheap:

; 468  : 
; 469  :         /* Exchange v with the smallest son */
; 470  :         s->heap[k] = s->heap[j];  k = j;

  00095	49 63 c0	 movsxd	 rax, r8d
  00098	4d 63 c1	 movsxd	 r8, r9d

; 471  : 
; 472  :         /* And continue down the tree, setting j to the left son of k */
; 473  :         j <<= 1;

  0009b	45 03 c9	 add	 r9d, r9d
  0009e	44 89 9c 81 a8
	0b 00 00	 mov	 DWORD PTR [rcx+rax*4+2984], r11d
  000a6	8b 81 9c 14 00
	00		 mov	 eax, DWORD PTR [rcx+5276]
  000ac	44 3b c8	 cmp	 r9d, eax
  000af	0f 8e 77 ff ff
	ff		 jle	 $LN19@pqdownheap

; 474  :     }
; 475  :     s->heap[k] = v;

  000b5	42 89 bc 81 a8
	0b 00 00	 mov	 DWORD PTR [rcx+r8*4+2984], edi
  000bd	48 8b 74 24 10	 mov	 rsi, QWORD PTR [rsp+16]

; 476  : }

  000c2	48 8b 5c 24 18	 mov	 rbx, QWORD PTR [rsp+24]
  000c7	5f		 pop	 rdi
  000c8	c3		 ret	 0
$LN14@pqdownheap:
  000c9	48 8b 74 24 10	 mov	 rsi, QWORD PTR [rsp+16]

; 474  :     }
; 475  :     s->heap[k] = v;

  000ce	49 63 c0	 movsxd	 rax, r8d
  000d1	89 bc 81 a8 0b
	00 00		 mov	 DWORD PTR [rcx+rax*4+2984], edi

; 476  : }

  000d8	48 8b 5c 24 18	 mov	 rbx, QWORD PTR [rsp+24]
  000dd	5f		 pop	 rdi
  000de	c3		 ret	 0
$LN16@pqdownheap:
  000df	48 8b 5c 24 18	 mov	 rbx, QWORD PTR [rsp+24]
  000e4	49 63 c0	 movsxd	 rax, r8d
  000e7	89 bc 81 a8 0b
	00 00		 mov	 DWORD PTR [rcx+rax*4+2984], edi
  000ee	5f		 pop	 rdi
  000ef	c3		 ret	 0
pqdownheap ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\workdir\c++source\zlib128\zlib-1.2.8\trees.c
;	COMDAT gen_bitlen
_TEXT	SEGMENT
s$ = 64
h$1$ = 72
desc$ = 72
extra$1$ = 80
gen_bitlen PROC						; COMDAT

; 491  : {

  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	56		 push	 rsi
  00004	57		 push	 rdi
  00005	41 54		 push	 r12
  00007	48 83 ec 10	 sub	 rsp, 16

; 492  :     ct_data *tree        = desc->dyn_tree;
; 493  :     int max_code         = desc->max_code;
; 494  :     const ct_data *stree = desc->stat_desc->static_tree;

  0000b	48 8b 42 10	 mov	 rax, QWORD PTR [rdx+16]
  0000f	48 8b 32	 mov	 rsi, QWORD PTR [rdx]
  00012	8b 5a 08	 mov	 ebx, DWORD PTR [rdx+8]
  00015	4c 8b 20	 mov	 r12, QWORD PTR [rax]

; 495  :     const intf *extra    = desc->stat_desc->extra_bits;
; 496  :     int base             = desc->stat_desc->extra_base;

  00018	4c 63 50 10	 movsxd	 r10, DWORD PTR [rax+16]

; 497  :     int max_length       = desc->stat_desc->max_length;

  0001c	4c 63 48 18	 movsxd	 r9, DWORD PTR [rax+24]
  00020	4c 8b c1	 mov	 r8, rcx
  00023	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]

; 498  :     int h;              /* heap index */
; 499  :     int n, m;           /* iterate over the tree elements */
; 500  :     int bits;           /* bit length */
; 501  :     int xbits;          /* extra bits */
; 502  :     ush f;              /* frequency */
; 503  :     int overflow = 0;   /* number of elements with bit length too large */

  00027	45 33 db	 xor	 r11d, r11d
  0002a	48 89 4c 24 50	 mov	 QWORD PTR extra$1$[rsp], rcx

; 504  : 
; 505  :     for (bits = 0; bits <= MAX_BITS; bits++) s->bl_count[bits] = 0;

  0002f	41 0f b7 c3	 movzx	 eax, r11w
  00033	49 8d b8 88 0b
	00 00		 lea	 rdi, QWORD PTR [r8+2952]
  0003a	b9 10 00 00 00	 mov	 ecx, 16

; 506  : 
; 507  :     /* In a first pass, compute the optimal bit lengths (which may
; 508  :      * overflow in the case of the bit length tree).
; 509  :      */
; 510  :     tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */
; 511  : 
; 512  :     for (h = s->heap_max+1; h < HEAP_SIZE; h++) {

  0003f	bd 3d 02 00 00	 mov	 ebp, 573		; 0000023dH
  00044	41 8b d3	 mov	 edx, r11d
  00047	66 f3 ab	 rep stosw
  0004a	49 63 80 a0 14
	00 00		 movsxd	 rax, DWORD PTR [r8+5280]
  00051	49 63 8c 80 a8
	0b 00 00	 movsxd	 rcx, DWORD PTR [r8+rax*4+2984]
  00059	66 44 89 5c 8e
	02		 mov	 WORD PTR [rsi+rcx*4+2], r11w
  0005f	41 8b 88 a0 14
	00 00		 mov	 ecx, DWORD PTR [r8+5280]
  00066	ff c1		 inc	 ecx
  00068	48 63 c1	 movsxd	 rax, ecx
  0006b	48 3b c5	 cmp	 rax, rbp
  0006e	0f 8d 8b 01 00
	00		 jge	 $LN5@gen_bitlen

; 495  :     const intf *extra    = desc->stat_desc->extra_bits;
; 496  :     int base             = desc->stat_desc->extra_base;

  00074	4c 89 6c 24 58	 mov	 QWORD PTR [rsp+88], r13
  00079	4c 89 74 24 08	 mov	 QWORD PTR [rsp+8], r14
  0007e	48 2b e8	 sub	 rbp, rax
  00081	4d 8d b0 a8 0b
	00 00		 lea	 r14, QWORD PTR [r8+2984]

; 506  : 
; 507  :     /* In a first pass, compute the optimal bit lengths (which may
; 508  :      * overflow in the case of the bit length tree).
; 509  :      */
; 510  :     tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */
; 511  : 
; 512  :     for (h = s->heap_max+1; h < HEAP_SIZE; h++) {

  00088	03 cd		 add	 ecx, ebp
  0008a	4c 89 3c 24	 mov	 QWORD PTR [rsp], r15
  0008e	4d 8d 34 86	 lea	 r14, QWORD PTR [r14+rax*4]
  00092	4d 8b ea	 mov	 r13, r10
  00095	89 4c 24 48	 mov	 DWORD PTR h$1$[rsp], ecx
  00099	0f 1f 80 00 00
	00 00		 npad	 7
$LL20@gen_bitlen:

; 513  :         n = s->heap[h];

  000a0	4d 63 1e	 movsxd	 r11, DWORD PTR [r14]

; 514  :         bits = tree[tree[n].Dad].Len + 1;

  000a3	49 8b fb	 mov	 rdi, r11
  000a6	4e 8d 3c 9d 00
	00 00 00	 lea	 r15, QWORD PTR [r11*4]
  000ae	41 0f b7 44 37
	02		 movzx	 eax, WORD PTR [r15+rsi+2]
  000b4	0f b7 4c 86 02	 movzx	 ecx, WORD PTR [rsi+rax*4+2]
  000b9	ff c1		 inc	 ecx

; 515  :         if (bits > max_length) bits = max_length, overflow++;

  000bb	41 3b c9	 cmp	 ecx, r9d
  000be	7e 05		 jle	 SHORT $LN17@gen_bitlen
  000c0	41 8b c9	 mov	 ecx, r9d
  000c3	ff c2		 inc	 edx
$LN17@gen_bitlen:

; 516  :         tree[n].Len = (ush)bits;

  000c5	66 41 89 4c 37
	02		 mov	 WORD PTR [r15+rsi+2], cx

; 517  :         /* We overwrite tree[n].Dad which is no longer needed */
; 518  : 
; 519  :         if (n > max_code) continue; /* not a leaf node */

  000cb	44 3b db	 cmp	 r11d, ebx
  000ce	7f 4b		 jg	 SHORT $LN19@gen_bitlen

; 520  : 
; 521  :         s->bl_count[bits]++;

  000d0	48 63 c1	 movsxd	 rax, ecx

; 522  :         xbits = 0;

  000d3	45 33 d2	 xor	 r10d, r10d
  000d6	66 41 ff 84 40
	88 0b 00 00	 inc	 WORD PTR [r8+rax*2+2952]

; 523  :         if (n >= base) xbits = extra[n-base];

  000df	45 3b dd	 cmp	 r11d, r13d
  000e2	7c 0c		 jl	 SHORT $LN15@gen_bitlen
  000e4	48 8b 44 24 50	 mov	 rax, QWORD PTR extra$1$[rsp]
  000e9	49 2b fd	 sub	 rdi, r13
  000ec	44 8b 14 b8	 mov	 r10d, DWORD PTR [rax+rdi*4]
$LN15@gen_bitlen:

; 524  :         f = tree[n].Freq;
; 525  :         s->opt_len += (ulg)f * (bits + xbits);

  000f0	41 0f b7 3c 37	 movzx	 edi, WORD PTR [r15+rsi]
  000f5	41 8d 04 0a	 lea	 eax, DWORD PTR [r10+rcx]
  000f9	0f af c7	 imul	 eax, edi
  000fc	41 01 80 00 17
	00 00		 add	 DWORD PTR [r8+5888], eax

; 526  :         if (stree) s->static_len += (ulg)f * (stree[n].Len + xbits);

  00103	4d 85 e4	 test	 r12, r12
  00106	74 13		 je	 SHORT $LN19@gen_bitlen
  00108	43 0f b7 44 27
	02		 movzx	 eax, WORD PTR [r15+r12+2]
  0010e	41 03 c2	 add	 eax, r10d
  00111	0f af c7	 imul	 eax, edi
  00114	41 01 80 04 17
	00 00		 add	 DWORD PTR [r8+5892], eax
$LN19@gen_bitlen:

; 506  : 
; 507  :     /* In a first pass, compute the optimal bit lengths (which may
; 508  :      * overflow in the case of the bit length tree).
; 509  :      */
; 510  :     tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */
; 511  : 
; 512  :     for (h = s->heap_max+1; h < HEAP_SIZE; h++) {

  0011b	49 83 c6 04	 add	 r14, 4
  0011f	48 ff cd	 dec	 rbp
  00122	0f 85 78 ff ff
	ff		 jne	 $LL20@gen_bitlen

; 527  :     }
; 528  :     if (overflow == 0) return;

  00128	4c 8b 3c 24	 mov	 r15, QWORD PTR [rsp]
  0012c	4c 8b 74 24 08	 mov	 r14, QWORD PTR [rsp+8]
  00131	4c 8b 6c 24 58	 mov	 r13, QWORD PTR [rsp+88]
  00136	85 d2		 test	 edx, edx
  00138	0f 84 c1 00 00
	00		 je	 $LN5@gen_bitlen

; 497  :     int max_length       = desc->stat_desc->max_length;

  0013e	45 8d 51 ff	 lea	 r10d, DWORD PTR [r9-1]
  00142	4b 8d 3c 48	 lea	 rdi, QWORD PTR [r8+r9*2]
  00146	41 bb ff ff 00
	00		 mov	 r11d, 65535		; 0000ffffH
  0014c	0f 1f 40 00	 npad	 4
$LL12@gen_bitlen:

; 529  : 
; 530  :     Trace((stderr,"\nbit length overflow\n"));
; 531  :     /* This happens for example on obj2 and pic of the Calgary corpus */
; 532  : 
; 533  :     /* Find the first bit length which could increase: */
; 534  :     do {
; 535  :         bits = max_length-1;

  00150	49 63 ca	 movsxd	 rcx, r10d

; 536  :         while (s->bl_count[bits] == 0) bits--;

  00153	66 41 83 bc 48
	88 0b 00 00 00	 cmp	 WORD PTR [r8+rcx*2+2952], 0
  0015d	75 12		 jne	 SHORT $LN8@gen_bitlen
  0015f	90		 npad	 1
$LL9@gen_bitlen:
  00160	ff c9		 dec	 ecx
  00162	48 63 c1	 movsxd	 rax, ecx
  00165	66 41 83 bc 40
	88 0b 00 00 00	 cmp	 WORD PTR [r8+rax*2+2952], 0
  0016f	74 ef		 je	 SHORT $LL9@gen_bitlen
$LN8@gen_bitlen:

; 537  :         s->bl_count[bits]--;      /* move one leaf down the tree */

  00171	48 63 c1	 movsxd	 rax, ecx

; 538  :         s->bl_count[bits+1] += 2; /* move one overflow item as its brother */
; 539  :         s->bl_count[max_length]--;
; 540  :         /* The brother of the overflow item also moves one step up,
; 541  :          * but this does not affect bl_count[max_length]
; 542  :          */
; 543  :         overflow -= 2;

  00174	83 ea 02	 sub	 edx, 2
  00177	66 45 01 9c 40
	88 0b 00 00	 add	 WORD PTR [r8+rax*2+2952], r11w
  00180	66 41 83 84 40
	8a 0b 00 00 02	 add	 WORD PTR [r8+rax*2+2954], 2
  0018a	66 44 01 9f 88
	0b 00 00	 add	 WORD PTR [rdi+2952], r11w

; 544  :     } while (overflow > 0);

  00192	85 d2		 test	 edx, edx
  00194	7f ba		 jg	 SHORT $LL12@gen_bitlen

; 545  : 
; 546  :     /* Now recompute all bit lengths, scanning in increasing frequency.
; 547  :      * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
; 548  :      * lengths instead of fixing only the wrong ones. This idea is taken
; 549  :      * from 'ar' written by Haruhiko Okumura.)
; 550  :      */
; 551  :     for (bits = max_length; bits != 0; bits--) {

  00196	45 85 c9	 test	 r9d, r9d
  00199	74 64		 je	 SHORT $LN5@gen_bitlen
  0019b	4c 63 5c 24 48	 movsxd	 r11, DWORD PTR h$1$[rsp]
$LL7@gen_bitlen:

; 552  :         n = s->bl_count[bits];

  001a0	49 63 c1	 movsxd	 rax, r9d
  001a3	41 0f b7 94 40
	88 0b 00 00	 movzx	 edx, WORD PTR [r8+rax*2+2952]

; 553  :         while (n != 0) {

  001ac	85 d2		 test	 edx, edx
  001ae	74 4a		 je	 SHORT $LN6@gen_bitlen

; 552  :         n = s->bl_count[bits];

  001b0	4d 8d 90 a8 0b
	00 00		 lea	 r10, QWORD PTR [r8+2984]
  001b7	4f 8d 14 9a	 lea	 r10, QWORD PTR [r10+r11*4]
  001bb	0f 1f 44 00 00	 npad	 5
$LL4@gen_bitlen:

; 554  :             m = s->heap[--h];

  001c0	49 63 42 fc	 movsxd	 rax, DWORD PTR [r10-4]
  001c4	4d 8d 52 fc	 lea	 r10, QWORD PTR [r10-4]
  001c8	49 ff cb	 dec	 r11

; 555  :             if (m > max_code) continue;

  001cb	3b c3		 cmp	 eax, ebx
  001cd	7f 27		 jg	 SHORT $LN36@gen_bitlen

; 556  :             if ((unsigned) tree[m].Len != (unsigned) bits) {

  001cf	48 8d 3c 86	 lea	 rdi, QWORD PTR [rsi+rax*4]
  001d3	0f b7 44 86 02	 movzx	 eax, WORD PTR [rsi+rax*4+2]
  001d8	41 3b c1	 cmp	 eax, r9d
  001db	74 17		 je	 SHORT $LN1@gen_bitlen

; 557  :                 Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
; 558  :                 s->opt_len += ((long)bits - (long)tree[m].Len)
; 559  :                               *(long)tree[m].Freq;

  001dd	41 8b c9	 mov	 ecx, r9d
  001e0	2b c8		 sub	 ecx, eax
  001e2	0f b7 07	 movzx	 eax, WORD PTR [rdi]
  001e5	0f af c8	 imul	 ecx, eax
  001e8	41 01 88 00 17
	00 00		 add	 DWORD PTR [r8+5888], ecx

; 560  :                 tree[m].Len = (ush)bits;

  001ef	66 44 89 4f 02	 mov	 WORD PTR [rdi+2], r9w
$LN1@gen_bitlen:

; 561  :             }
; 562  :             n--;

  001f4	ff ca		 dec	 edx
$LN36@gen_bitlen:

; 553  :         while (n != 0) {

  001f6	85 d2		 test	 edx, edx
  001f8	75 c6		 jne	 SHORT $LL4@gen_bitlen
$LN6@gen_bitlen:

; 545  : 
; 546  :     /* Now recompute all bit lengths, scanning in increasing frequency.
; 547  :      * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
; 548  :      * lengths instead of fixing only the wrong ones. This idea is taken
; 549  :      * from 'ar' written by Haruhiko Okumura.)
; 550  :      */
; 551  :     for (bits = max_length; bits != 0; bits--) {

  001fa	41 ff c9	 dec	 r9d
  001fd	75 a1		 jne	 SHORT $LL7@gen_bitlen
$LN5@gen_bitlen:

; 563  :         }
; 564  :     }
; 565  : }

  001ff	48 83 c4 10	 add	 rsp, 16
  00203	41 5c		 pop	 r12
  00205	5f		 pop	 rdi
  00206	5e		 pop	 rsi
  00207	5d		 pop	 rbp
  00208	5b		 pop	 rbx
  00209	c3		 ret	 0
gen_bitlen ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\workdir\c++source\zlib128\zlib-1.2.8\trees.c
;	COMDAT gen_codes
_TEXT	SEGMENT
next_code$ = 32
tree$ = 80
max_code$ = 88
bl_count$ = 96
gen_codes PROC						; COMDAT

; 579  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 580  :     ush next_code[MAX_BITS+1]; /* next code value for each bit length */
; 581  :     ush code = 0;              /* running code value */

  00006	45 33 c9	 xor	 r9d, r9d

; 582  :     int bits;                  /* bit index */
; 583  :     int n;                     /* code index */
; 584  : 
; 585  :     /* The distribution counts are first used to generate the code values
; 586  :      * without bit reversal.
; 587  :      */
; 588  :     for (bits = 1; bits <= MAX_BITS; bits++) {

  00009	48 8d 44 24 22	 lea	 rax, QWORD PTR next_code$[rsp+2]
  0000e	48 8b d9	 mov	 rbx, rcx
  00011	4c 2b c0	 sub	 r8, rax
  00014	45 0f b7 d1	 movzx	 r10d, r9w
  00018	41 bb 01 00 00
	00		 mov	 r11d, 1
  0001e	66 90		 npad	 2
$LL14@gen_codes:
  00020	4b 8d 04 58	 lea	 rax, QWORD PTR [r8+r11*2]
  00024	49 ff c3	 inc	 r11

; 589  :         next_code[bits] = code = (code + bl_count[bits-1]) << 1;

  00027	66 44 03 54 04
	20		 add	 r10w, WORD PTR next_code$[rsp+rax]
  0002d	66 45 03 d2	 add	 r10w, r10w
  00031	66 46 89 54 5c
	1e		 mov	 WORD PTR next_code$[rsp+r11*2-2], r10w
  00037	49 83 fb 0f	 cmp	 r11, 15
  0003b	7e e3		 jle	 SHORT $LL14@gen_codes

; 590  :     }
; 591  :     /* Check that the bit counts in bl_count are consistent. The last code
; 592  :      * must be all ones.
; 593  :      */
; 594  :     Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
; 595  :             "inconsistent bit counts");
; 596  :     Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
; 597  : 
; 598  :     for (n = 0;  n <= max_code; n++) {

  0003d	4c 63 d2	 movsxd	 r10, edx
  00040	85 d2		 test	 edx, edx
  00042	78 31		 js	 SHORT $LN2@gen_codes
$LL4@gen_codes:

; 599  :         int len = tree[n].Len;

  00044	42 0f b7 54 8b
	02		 movzx	 edx, WORD PTR [rbx+r9*4+2]

; 600  :         if (len == 0) continue;

  0004a	85 d2		 test	 edx, edx
  0004c	74 1f		 je	 SHORT $LN3@gen_codes

; 601  :         /* Now reverse the bits */
; 602  :         tree[n].Code = bi_reverse(next_code[len]++, len);

  0004e	4c 8d 44 24 20	 lea	 r8, QWORD PTR next_code$[rsp]
  00053	41 0f b7 0c 50	 movzx	 ecx, WORD PTR [r8+rdx*2]
  00058	4d 8d 04 50	 lea	 r8, QWORD PTR [r8+rdx*2]
  0005c	8d 41 01	 lea	 eax, DWORD PTR [rcx+1]
  0005f	66 41 89 00	 mov	 WORD PTR [r8], ax
  00063	e8 00 00 00 00	 call	 bi_reverse
  00068	66 42 89 04 8b	 mov	 WORD PTR [rbx+r9*4], ax
$LN3@gen_codes:

; 590  :     }
; 591  :     /* Check that the bit counts in bl_count are consistent. The last code
; 592  :      * must be all ones.
; 593  :      */
; 594  :     Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
; 595  :             "inconsistent bit counts");
; 596  :     Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
; 597  : 
; 598  :     for (n = 0;  n <= max_code; n++) {

  0006d	49 ff c1	 inc	 r9
  00070	4d 3b ca	 cmp	 r9, r10
  00073	7e cf		 jle	 SHORT $LL4@gen_codes
$LN2@gen_codes:

; 603  : 
; 604  :         Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
; 605  :              n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
; 606  :     }
; 607  : }

  00075	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
gen_codes ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\workdir\c++source\zlib128\zlib-1.2.8\trees.c
;	COMDAT build_tree
_TEXT	SEGMENT
s$ = 64
desc$ = 72
build_tree PROC						; COMDAT

; 620  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 54		 push	 r12
  00016	41 56		 push	 r14
  00018	41 57		 push	 r15
  0001a	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 621  :     ct_data *tree         = desc->dyn_tree;
; 622  :     const ct_data *stree  = desc->stat_desc->static_tree;

  0001e	48 8b 42 10	 mov	 rax, QWORD PTR [rdx+16]
  00022	48 8b 32	 mov	 rsi, QWORD PTR [rdx]

; 623  :     int elems             = desc->stat_desc->elems;
; 624  :     int n, m;          /* iterate over heap elements */
; 625  :     int max_code = -1; /* largest code with non zero frequency */
; 626  :     int node;          /* new node being created */
; 627  : 
; 628  :     /* Construct the initial heap, with least frequent element in
; 629  :      * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
; 630  :      * heap[0] is not used.
; 631  :      */
; 632  :     s->heap_len = 0, s->heap_max = HEAP_SIZE;

  00025	45 33 d2	 xor	 r10d, r10d
  00028	4c 63 70 14	 movsxd	 r14, DWORD PTR [rax+20]
  0002c	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  0002f	83 cd ff	 or	 ebp, -1
  00032	48 8b d9	 mov	 rbx, rcx
  00035	44 89 91 9c 14
	00 00		 mov	 DWORD PTR [rcx+5276], r10d
  0003c	c7 81 a0 14 00
	00 3d 02 00 00	 mov	 DWORD PTR [rcx+5280], 573 ; 0000023dH
  00046	4c 8b fa	 mov	 r15, rdx

; 633  : 
; 634  :     for (n = 0; n < elems; n++) {

  00049	45 8b c2	 mov	 r8d, r10d
  0004c	41 8b ca	 mov	 ecx, r10d
  0004f	45 85 f6	 test	 r14d, r14d
  00052	7e 3a		 jle	 SHORT $LN22@build_tree
$LL14@build_tree:

; 635  :         if (tree[n].Freq != 0) {

  00054	66 44 39 14 8e	 cmp	 WORD PTR [rsi+rcx*4], r10w
  00059	74 22		 je	 SHORT $LN11@build_tree

; 636  :             s->heap[++(s->heap_len)] = max_code = n;

  0005b	ff 83 9c 14 00
	00		 inc	 DWORD PTR [rbx+5276]
  00061	48 63 83 9c 14
	00 00		 movsxd	 rax, DWORD PTR [rbx+5276]
  00068	41 8b e8	 mov	 ebp, r8d
  0006b	44 89 84 83 a8
	0b 00 00	 mov	 DWORD PTR [rbx+rax*4+2984], r8d

; 637  :             s->depth[n] = 0;

  00073	44 88 94 19 a4
	14 00 00	 mov	 BYTE PTR [rcx+rbx+5284], r10b

; 638  :         } else {

  0007b	eb 06		 jmp	 SHORT $LN13@build_tree
$LN11@build_tree:

; 639  :             tree[n].Len = 0;

  0007d	66 44 89 54 8e
	02		 mov	 WORD PTR [rsi+rcx*4+2], r10w
$LN13@build_tree:

; 633  : 
; 634  :     for (n = 0; n < elems; n++) {

  00083	48 ff c1	 inc	 rcx
  00086	41 ff c0	 inc	 r8d
  00089	49 3b ce	 cmp	 rcx, r14
  0008c	7c c6		 jl	 SHORT $LL14@build_tree
$LN22@build_tree:

; 640  :         }
; 641  :     }
; 642  : 
; 643  :     /* The pkzip format requires that at least one distance code exists,
; 644  :      * and that at least one bit should be sent even if there is only one
; 645  :      * possible code. So to avoid special checks later on we force at least
; 646  :      * two codes of non zero frequency.
; 647  :      */
; 648  :     while (s->heap_len < 2) {

  0008e	83 bb 9c 14 00
	00 02		 cmp	 DWORD PTR [rbx+5276], 2
  00095	41 bc 01 00 00
	00		 mov	 r12d, 1
  0009b	7d 55		 jge	 SHORT $LN8@build_tree
  0009d	0f 1f 00	 npad	 3
$LL9@build_tree:

; 649  :         node = s->heap[++(s->heap_len)] = (max_code < 2 ? ++max_code : 0);

  000a0	83 fd 02	 cmp	 ebp, 2
  000a3	7d 06		 jge	 SHORT $LN17@build_tree
  000a5	ff c5		 inc	 ebp
  000a7	8b cd		 mov	 ecx, ebp
  000a9	eb 03		 jmp	 SHORT $LN18@build_tree
$LN17@build_tree:
  000ab	41 8b ca	 mov	 ecx, r10d
$LN18@build_tree:
  000ae	ff 83 9c 14 00
	00		 inc	 DWORD PTR [rbx+5276]
  000b4	48 63 83 9c 14
	00 00		 movsxd	 rax, DWORD PTR [rbx+5276]
  000bb	89 8c 83 a8 0b
	00 00		 mov	 DWORD PTR [rbx+rax*4+2984], ecx

; 650  :         tree[node].Freq = 1;

  000c2	48 63 c1	 movsxd	 rax, ecx
  000c5	66 44 89 24 86	 mov	 WORD PTR [rsi+rax*4], r12w

; 651  :         s->depth[node] = 0;

  000ca	44 88 94 18 a4
	14 00 00	 mov	 BYTE PTR [rax+rbx+5284], r10b

; 652  :         s->opt_len--; if (stree) s->static_len -= stree[node].Len;

  000d2	ff 8b 00 17 00
	00		 dec	 DWORD PTR [rbx+5888]
  000d8	4d 85 c9	 test	 r9, r9
  000db	74 0c		 je	 SHORT $LN7@build_tree
  000dd	41 0f b7 44 81
	02		 movzx	 eax, WORD PTR [r9+rax*4+2]
  000e3	29 83 04 17 00
	00		 sub	 DWORD PTR [rbx+5892], eax
$LN7@build_tree:

; 640  :         }
; 641  :     }
; 642  : 
; 643  :     /* The pkzip format requires that at least one distance code exists,
; 644  :      * and that at least one bit should be sent even if there is only one
; 645  :      * possible code. So to avoid special checks later on we force at least
; 646  :      * two codes of non zero frequency.
; 647  :      */
; 648  :     while (s->heap_len < 2) {

  000e9	83 bb 9c 14 00
	00 02		 cmp	 DWORD PTR [rbx+5276], 2
  000f0	7c ae		 jl	 SHORT $LL9@build_tree
$LN8@build_tree:

; 653  :         /* node is 0 or 1 so it does not have extra bits */
; 654  :     }
; 655  :     desc->max_code = max_code;

  000f2	89 6a 08	 mov	 DWORD PTR [rdx+8], ebp

; 656  : 
; 657  :     /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
; 658  :      * establish sub-heaps of increasing lengths:
; 659  :      */
; 660  :     for (n = s->heap_len/2; n >= 1; n--) pqdownheap(s, tree, n);

  000f5	8b 83 9c 14 00
	00		 mov	 eax, DWORD PTR [rbx+5276]
  000fb	99		 cdq
  000fc	2b c2		 sub	 eax, edx
  000fe	d1 f8		 sar	 eax, 1
  00100	8b f8		 mov	 edi, eax
  00102	41 3b c4	 cmp	 eax, r12d
  00105	7c 29		 jl	 SHORT $LL3@build_tree
  00107	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL6@build_tree:
  00110	44 8b c7	 mov	 r8d, edi
  00113	48 8b d6	 mov	 rdx, rsi
  00116	48 8b cb	 mov	 rcx, rbx
  00119	e8 00 00 00 00	 call	 pqdownheap
  0011e	ff cf		 dec	 edi
  00120	41 3b fc	 cmp	 edi, r12d
  00123	7d eb		 jge	 SHORT $LL6@build_tree
  00125	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL3@build_tree:

; 661  : 
; 662  :     /* Construct the Huffman tree by repeatedly combining the least two
; 663  :      * frequent nodes.
; 664  :      */
; 665  :     node = elems;              /* next internal node of the tree */
; 666  :     do {
; 667  :         pqremove(s, tree, n);  /* n = node of least frequency */

  00130	48 63 83 9c 14
	00 00		 movsxd	 rax, DWORD PTR [rbx+5276]
  00137	48 63 bb ac 0b
	00 00		 movsxd	 rdi, DWORD PTR [rbx+2988]
  0013e	45 8b c4	 mov	 r8d, r12d
  00141	8b 8c 83 a8 0b
	00 00		 mov	 ecx, DWORD PTR [rbx+rax*4+2984]
  00148	48 8b d6	 mov	 rdx, rsi
  0014b	89 8b ac 0b 00
	00		 mov	 DWORD PTR [rbx+2988], ecx
  00151	ff 8b 9c 14 00
	00		 dec	 DWORD PTR [rbx+5276]
  00157	48 8b cb	 mov	 rcx, rbx
  0015a	e8 00 00 00 00	 call	 pqdownheap

; 668  :         m = s->heap[SMALLEST]; /* m = node of next least frequency */

  0015f	48 63 8b ac 0b
	00 00		 movsxd	 rcx, DWORD PTR [rbx+2988]

; 669  : 
; 670  :         s->heap[--(s->heap_max)] = n; /* keep the nodes sorted by frequency */

  00166	ff 8b a0 14 00
	00		 dec	 DWORD PTR [rbx+5280]
  0016c	48 63 83 a0 14
	00 00		 movsxd	 rax, DWORD PTR [rbx+5280]

; 671  :         s->heap[--(s->heap_max)] = m;
; 672  : 
; 673  :         /* Create a new node father of n and m */
; 674  :         tree[node].Freq = tree[n].Freq + tree[m].Freq;

  00173	48 8b d1	 mov	 rdx, rcx
  00176	4c 8d 04 be	 lea	 r8, QWORD PTR [rsi+rdi*4]
  0017a	89 bc 83 a8 0b
	00 00		 mov	 DWORD PTR [rbx+rax*4+2984], edi
  00181	ff 8b a0 14 00
	00		 dec	 DWORD PTR [rbx+5280]
  00187	48 63 83 a0 14
	00 00		 movsxd	 rax, DWORD PTR [rbx+5280]
  0018e	89 8c 83 a8 0b
	00 00		 mov	 DWORD PTR [rbx+rax*4+2984], ecx
  00195	0f b7 04 96	 movzx	 eax, WORD PTR [rsi+rdx*4]
  00199	4d 63 ce	 movsxd	 r9, r14d
  0019c	66 41 03 00	 add	 ax, WORD PTR [r8]
  001a0	48 8b cf	 mov	 rcx, rdi
  001a3	66 42 89 04 8e	 mov	 WORD PTR [rsi+r9*4], ax

; 675  :         s->depth[node] = (uch)((s->depth[n] >= s->depth[m] ?
; 676  :                                 s->depth[n] : s->depth[m]) + 1);

  001a8	0f b6 84 1f a4
	14 00 00	 movzx	 eax, BYTE PTR [rdi+rbx+5284]
  001b0	0f b6 8c 1a a4
	14 00 00	 movzx	 ecx, BYTE PTR [rdx+rbx+5284]
  001b8	3a c1		 cmp	 al, cl
  001ba	0f b6 c0	 movzx	 eax, al
  001bd	73 03		 jae	 SHORT $LN20@build_tree
  001bf	0f b6 c1	 movzx	 eax, cl
$LN20@build_tree:
  001c2	fe c0		 inc	 al

; 677  :         tree[n].Dad = tree[m].Dad = (ush)node;
; 678  : #ifdef DUMP_BL_TREE
; 679  :         if (tree == s->bl_tree) {
; 680  :             fprintf(stderr,"\nnode %d(%d), sons %d(%d) %d(%d)",
; 681  :                     node, tree[node].Freq, n, tree[n].Freq, m, tree[m].Freq);
; 682  :         }
; 683  : #endif
; 684  :         /* and insert the new node in the heap */
; 685  :         s->heap[SMALLEST] = node++;
; 686  :         pqdownheap(s, tree, SMALLEST);

  001c4	48 8b cb	 mov	 rcx, rbx
  001c7	41 88 84 19 a4
	14 00 00	 mov	 BYTE PTR [r9+rbx+5284], al
  001cf	66 44 89 74 96
	02		 mov	 WORD PTR [rsi+rdx*4+2], r14w
  001d5	66 45 89 70 02	 mov	 WORD PTR [r8+2], r14w
  001da	44 89 b3 ac 0b
	00 00		 mov	 DWORD PTR [rbx+2988], r14d
  001e1	45 8b c4	 mov	 r8d, r12d
  001e4	48 8b d6	 mov	 rdx, rsi
  001e7	41 ff c6	 inc	 r14d
  001ea	e8 00 00 00 00	 call	 pqdownheap

; 687  : 
; 688  :     } while (s->heap_len >= 2);

  001ef	83 bb 9c 14 00
	00 02		 cmp	 DWORD PTR [rbx+5276], 2
  001f6	0f 8d 34 ff ff
	ff		 jge	 $LL3@build_tree

; 689  : 
; 690  :     s->heap[--(s->heap_max)] = s->heap[SMALLEST];

  001fc	ff 8b a0 14 00
	00		 dec	 DWORD PTR [rbx+5280]
  00202	4c 63 83 a0 14
	00 00		 movsxd	 r8, DWORD PTR [rbx+5280]
  00209	8b 83 ac 0b 00
	00		 mov	 eax, DWORD PTR [rbx+2988]

; 691  : 
; 692  :     /* At this point, the fields freq and dad are set. We can now
; 693  :      * generate the bit lengths.
; 694  :      */
; 695  :     gen_bitlen(s, (tree_desc *)desc);

  0020f	49 8b d7	 mov	 rdx, r15
  00212	42 89 84 83 a8
	0b 00 00	 mov	 DWORD PTR [rbx+r8*4+2984], eax
  0021a	e8 00 00 00 00	 call	 gen_bitlen

; 696  : 
; 697  :     /* The field len is now set, we can generate the bit codes */
; 698  :     gen_codes ((ct_data *)tree, max_code, s->bl_count);

  0021f	4c 8d 83 88 0b
	00 00		 lea	 r8, QWORD PTR [rbx+2952]
  00226	8b d5		 mov	 edx, ebp
  00228	48 8b ce	 mov	 rcx, rsi

; 699  : }

  0022b	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00230	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00235	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  0023a	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  0023f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00243	41 5f		 pop	 r15
  00245	41 5e		 pop	 r14
  00247	41 5c		 pop	 r12

; 696  : 
; 697  :     /* The field len is now set, we can generate the bit codes */
; 698  :     gen_codes ((ct_data *)tree, max_code, s->bl_count);

  00249	e9 00 00 00 00	 jmp	 gen_codes
build_tree ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\workdir\c++source\zlib128\zlib-1.2.8\trees.c
;	COMDAT scan_tree
_TEXT	SEGMENT
s$ = 8
tree$ = 16
max_code$ = 24
scan_tree PROC						; COMDAT

; 709  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 7c 24 10	 mov	 QWORD PTR [rsp+16], rdi

; 710  :     int n;                     /* iterates over all tree elements */
; 711  :     int prevlen = -1;          /* last emitted length */
; 712  :     int curlen;                /* length of current code */
; 713  :     int nextlen = tree[0].Len; /* length of next code */

  0000a	0f b7 5a 02	 movzx	 ebx, WORD PTR [rdx+2]
  0000e	83 cf ff	 or	 edi, -1

; 714  :     int count = 0;             /* repeat count of the current code */

  00011	45 33 d2	 xor	 r10d, r10d
  00014	4c 8b c9	 mov	 r9, rcx

; 715  :     int max_count = 7;         /* max repeat count */

  00017	8d 47 08	 lea	 eax, QWORD PTR [rdi+8]

; 716  :     int min_count = 4;         /* min repeat count */

  0001a	44 8d 5f 05	 lea	 r11d, QWORD PTR [rdi+5]

; 717  : 
; 718  :     if (nextlen == 0) max_count = 138, min_count = 3;

  0001e	85 db		 test	 ebx, ebx
  00020	75 09		 jne	 SHORT $LN17@scan_tree
  00022	b8 8a 00 00 00	 mov	 eax, 138		; 0000008aH
  00027	44 8d 5f 04	 lea	 r11d, QWORD PTR [rdi+4]
$LN17@scan_tree:

; 719  :     tree[max_code+1].Len = (ush)0xffff; /* guard */

  0002b	49 63 c8	 movsxd	 rcx, r8d
  0002e	41 b8 ff ff 00
	00		 mov	 r8d, 65535		; 0000ffffH
  00034	66 44 89 44 8a
	06		 mov	 WORD PTR [rdx+rcx*4+6], r8w

; 720  : 
; 721  :     for (n = 0; n <= max_code; n++) {

  0003a	48 85 c9	 test	 rcx, rcx
  0003d	0f 88 9b 00 00
	00		 js	 $LN14@scan_tree

; 719  :     tree[max_code+1].Len = (ush)0xffff; /* guard */

  00043	48 83 c2 06	 add	 rdx, 6
  00047	4c 8d 41 01	 lea	 r8, QWORD PTR [rcx+1]
  0004b	0f 1f 44 00 00	 npad	 5
$LL16@scan_tree:

; 722  :         curlen = nextlen; nextlen = tree[n+1].Len;
; 723  :         if (++count < max_count && curlen == nextlen) {

  00050	41 ff c2	 inc	 r10d
  00053	48 63 cb	 movsxd	 rcx, ebx
  00056	0f b7 1a	 movzx	 ebx, WORD PTR [rdx]
  00059	44 3b d0	 cmp	 r10d, eax
  0005c	7d 04		 jge	 SHORT $LN13@scan_tree
  0005e	3b cb		 cmp	 ecx, ebx
  00060	74 6f		 je	 SHORT $LN15@scan_tree
$LN13@scan_tree:

; 724  :             continue;
; 725  :         } else if (count < min_count) {

  00062	45 3b d3	 cmp	 r10d, r11d
  00065	7d 0b		 jge	 SHORT $LN11@scan_tree

; 726  :             s->bl_tree[curlen].Freq += count;

  00067	66 45 01 94 89
	a4 0a 00 00	 add	 WORD PTR [r9+rcx*4+2724], r10w
  00070	eb 33		 jmp	 SHORT $LN5@scan_tree
$LN11@scan_tree:

; 727  :         } else if (curlen != 0) {

  00072	85 c9		 test	 ecx, ecx
  00074	74 17		 je	 SHORT $LN9@scan_tree

; 728  :             if (curlen != prevlen) s->bl_tree[curlen].Freq++;

  00076	3b cf		 cmp	 ecx, edi
  00078	74 09		 je	 SHORT $LN8@scan_tree
  0007a	66 41 ff 84 89
	a4 0a 00 00	 inc	 WORD PTR [r9+rcx*4+2724]
$LN8@scan_tree:

; 729  :             s->bl_tree[REP_3_6].Freq++;

  00083	66 41 ff 81 e4
	0a 00 00	 inc	 WORD PTR [r9+2788]
  0008b	eb 18		 jmp	 SHORT $LN5@scan_tree
$LN9@scan_tree:

; 730  :         } else if (count <= 10) {

  0008d	41 83 fa 0a	 cmp	 r10d, 10
  00091	7f 0a		 jg	 SHORT $LN6@scan_tree

; 731  :             s->bl_tree[REPZ_3_10].Freq++;

  00093	66 41 ff 81 e8
	0a 00 00	 inc	 WORD PTR [r9+2792]

; 732  :         } else {

  0009b	eb 08		 jmp	 SHORT $LN5@scan_tree
$LN6@scan_tree:

; 733  :             s->bl_tree[REPZ_11_138].Freq++;

  0009d	66 41 ff 81 ec
	0a 00 00	 inc	 WORD PTR [r9+2796]
$LN5@scan_tree:

; 734  :         }
; 735  :         count = 0; prevlen = curlen;

  000a5	45 33 d2	 xor	 r10d, r10d
  000a8	8b f9		 mov	 edi, ecx

; 736  :         if (nextlen == 0) {

  000aa	85 db		 test	 ebx, ebx
  000ac	75 0b		 jne	 SHORT $LN4@scan_tree

; 737  :             max_count = 138, min_count = 3;

  000ae	b8 8a 00 00 00	 mov	 eax, 138		; 0000008aH
  000b3	45 8d 5a 03	 lea	 r11d, QWORD PTR [r10+3]
  000b7	eb 18		 jmp	 SHORT $LN15@scan_tree
$LN4@scan_tree:

; 738  :         } else if (curlen == nextlen) {

  000b9	3b cb		 cmp	 ecx, ebx
  000bb	75 0b		 jne	 SHORT $LN2@scan_tree

; 739  :             max_count = 6, min_count = 3;

  000bd	b8 06 00 00 00	 mov	 eax, 6
  000c2	44 8d 58 fd	 lea	 r11d, QWORD PTR [rax-3]

; 740  :         } else {

  000c6	eb 09		 jmp	 SHORT $LN15@scan_tree
$LN2@scan_tree:

; 741  :             max_count = 7, min_count = 4;

  000c8	b8 07 00 00 00	 mov	 eax, 7
  000cd	44 8d 58 fd	 lea	 r11d, QWORD PTR [rax-3]
$LN15@scan_tree:

; 720  : 
; 721  :     for (n = 0; n <= max_code; n++) {

  000d1	48 83 c2 04	 add	 rdx, 4
  000d5	49 ff c8	 dec	 r8
  000d8	0f 85 72 ff ff
	ff		 jne	 $LL16@scan_tree
$LN14@scan_tree:

; 742  :         }
; 743  :     }
; 744  : }

  000de	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  000e3	48 8b 7c 24 10	 mov	 rdi, QWORD PTR [rsp+16]
  000e8	c3		 ret	 0
scan_tree ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\workdir\c++source\zlib128\zlib-1.2.8\trees.c
;	COMDAT send_tree
_TEXT	SEGMENT
s$ = 24
tree$ = 32
max_code$ = 40
send_tree PROC						; COMDAT

; 754  : {

  00000	40 53		 push	 rbx
  00002	55		 push	 rbp

; 755  :     int n;                     /* iterates over all tree elements */
; 756  :     int prevlen = -1;          /* last emitted length */
; 757  :     int curlen;                /* length of current code */
; 758  :     int nextlen = tree[0].Len; /* length of next code */

  00003	0f b7 6a 02	 movzx	 ebp, WORD PTR [rdx+2]
  00007	41 83 cb ff	 or	 r11d, -1

; 759  :     int count = 0;             /* repeat count of the current code */

  0000b	45 33 d2	 xor	 r10d, r10d
  0000e	48 8b c1	 mov	 rax, rcx
  00011	48 8b da	 mov	 rbx, rdx

; 760  :     int max_count = 7;         /* max repeat count */

  00014	41 8d 4b 08	 lea	 ecx, QWORD PTR [r11+8]

; 761  :     int min_count = 4;         /* min repeat count */

  00018	45 8d 4b 05	 lea	 r9d, QWORD PTR [r11+5]

; 762  : 
; 763  :     /* tree[max_code+1].Len = -1; */  /* guard already set */
; 764  :     if (nextlen == 0) max_count = 138, min_count = 3;

  0001c	85 ed		 test	 ebp, ebp
  0001e	75 09		 jne	 SHORT $LN36@send_tree
  00020	b9 8a 00 00 00	 mov	 ecx, 138		; 0000008aH
  00025	45 8d 4b 04	 lea	 r9d, QWORD PTR [r11+4]
$LN36@send_tree:

; 765  : 
; 766  :     for (n = 0; n <= max_code; n++) {

  00029	49 63 d0	 movsxd	 rdx, r8d
  0002c	45 85 c0	 test	 r8d, r8d
  0002f	0f 88 47 05 00
	00		 js	 $LN33@send_tree
  00035	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0003a	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  0003f	4c 89 74 24 28	 mov	 QWORD PTR [rsp+40], r14
  00044	4c 89 7c 24 30	 mov	 QWORD PTR [rsp+48], r15
  00049	4c 8d 73 06	 lea	 r14, QWORD PTR [rbx+6]
  0004d	4c 8d 7a 01	 lea	 r15, QWORD PTR [rdx+1]
$LL35@send_tree:

; 767  :         curlen = nextlen; nextlen = tree[n+1].Len;
; 768  :         if (++count < max_count && curlen == nextlen) {

  00051	41 ff c2	 inc	 r10d
  00054	48 63 fd	 movsxd	 rdi, ebp
  00057	41 0f b7 2e	 movzx	 ebp, WORD PTR [r14]
  0005b	44 3b d1	 cmp	 r10d, ecx
  0005e	7d 08		 jge	 SHORT $LN32@send_tree
  00060	3b fd		 cmp	 edi, ebp
  00062	0f 84 f3 04 00
	00		 je	 $LN34@send_tree
$LN32@send_tree:

; 769  :             continue;
; 770  :         } else if (count < min_count) {

  00068	45 3b d1	 cmp	 r10d, r9d
  0006b	0f 8d b6 00 00
	00		 jge	 $LN30@send_tree
  00071	48 8d 34 b8	 lea	 rsi, QWORD PTR [rax+rdi*4]
  00075	48 8d 1c b8	 lea	 rbx, QWORD PTR [rax+rdi*4]
  00079	0f 1f 80 00 00
	00 00		 npad	 7
$LL29@send_tree:

; 771  :             do { send_code(s, curlen, s->bl_tree); } while (--count != 0);

  00080	44 0f b7 9e a6
	0a 00 00	 movzx	 r11d, WORD PTR [rsi+2726]
  00088	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  0008e	ba 10 00 00 00	 mov	 edx, 16
  00093	41 2b d3	 sub	 edx, r11d
  00096	3b ca		 cmp	 ecx, edx
  00098	7e 65		 jle	 SHORT $LN26@send_tree
  0009a	44 0f b7 8b a4
	0a 00 00	 movzx	 r9d, WORD PTR [rbx+2724]
  000a2	44 8b 40 28	 mov	 r8d, DWORD PTR [rax+40]
  000a6	41 0f b7 d1	 movzx	 edx, r9w
  000aa	66 d3 e2	 shl	 dx, cl
  000ad	66 09 90 10 17
	00 00		 or	 WORD PTR [rax+5904], dx
  000b4	0f b6 88 10 17
	00 00		 movzx	 ecx, BYTE PTR [rax+5904]
  000bb	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  000bf	41 88 0c 10	 mov	 BYTE PTR [r8+rdx], cl
  000c3	ff 40 28	 inc	 DWORD PTR [rax+40]
  000c6	0f b6 88 11 17
	00 00		 movzx	 ecx, BYTE PTR [rax+5905]
  000cd	44 8b 40 28	 mov	 r8d, DWORD PTR [rax+40]
  000d1	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  000d5	41 88 0c 10	 mov	 BYTE PTR [r8+rdx], cl
  000d9	ff 40 28	 inc	 DWORD PTR [rax+40]
  000dc	b9 10 00 00 00	 mov	 ecx, 16
  000e1	2a 88 14 17 00
	00		 sub	 cl, BYTE PTR [rax+5908]
  000e7	66 41 d3 e9	 shr	 r9w, cl
  000eb	41 8d 4b f0	 lea	 ecx, DWORD PTR [r11-16]
  000ef	01 88 14 17 00
	00		 add	 DWORD PTR [rax+5908], ecx
  000f5	66 44 89 88 10
	17 00 00	 mov	 WORD PTR [rax+5904], r9w
  000fd	eb 1a		 jmp	 SHORT $LN28@send_tree
$LN26@send_tree:
  000ff	0f b7 93 a4 0a
	00 00		 movzx	 edx, WORD PTR [rbx+2724]
  00106	66 d3 e2	 shl	 dx, cl
  00109	66 09 90 10 17
	00 00		 or	 WORD PTR [rax+5904], dx
  00110	41 03 cb	 add	 ecx, r11d
  00113	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN28@send_tree:
  00119	41 ff ca	 dec	 r10d
  0011c	0f 85 5e ff ff
	ff		 jne	 $LL29@send_tree

; 772  : 
; 773  :         } else if (curlen != 0) {

  00122	e9 07 04 00 00	 jmp	 $LN5@send_tree
$LN30@send_tree:
  00127	85 ff		 test	 edi, edi
  00129	0f 84 c6 01 00
	00		 je	 $LN23@send_tree

; 774  :             if (curlen != prevlen) {

  0012f	41 3b fb	 cmp	 edi, r11d
  00132	0f 84 9f 00 00
	00		 je	 $LN22@send_tree

; 775  :                 send_code(s, curlen, s->bl_tree); count--;

  00138	44 0f b7 9c b8
	a6 0a 00 00	 movzx	 r11d, WORD PTR [rax+rdi*4+2726]
  00141	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  00147	ba 10 00 00 00	 mov	 edx, 16
  0014c	41 2b d3	 sub	 edx, r11d
  0014f	3b ca		 cmp	 ecx, edx
  00151	7e 66		 jle	 SHORT $LN21@send_tree
  00153	44 0f b7 8c b8
	a4 0a 00 00	 movzx	 r9d, WORD PTR [rax+rdi*4+2724]
  0015c	44 8b 40 28	 mov	 r8d, DWORD PTR [rax+40]
  00160	41 0f b7 d1	 movzx	 edx, r9w
  00164	66 d3 e2	 shl	 dx, cl
  00167	66 09 90 10 17
	00 00		 or	 WORD PTR [rax+5904], dx
  0016e	0f b6 88 10 17
	00 00		 movzx	 ecx, BYTE PTR [rax+5904]
  00175	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  00179	41 88 0c 10	 mov	 BYTE PTR [r8+rdx], cl
  0017d	ff 40 28	 inc	 DWORD PTR [rax+40]
  00180	0f b6 88 11 17
	00 00		 movzx	 ecx, BYTE PTR [rax+5905]
  00187	44 8b 40 28	 mov	 r8d, DWORD PTR [rax+40]
  0018b	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  0018f	41 88 0c 10	 mov	 BYTE PTR [r8+rdx], cl
  00193	ff 40 28	 inc	 DWORD PTR [rax+40]
  00196	b9 10 00 00 00	 mov	 ecx, 16
  0019b	2a 88 14 17 00
	00		 sub	 cl, BYTE PTR [rax+5908]
  001a1	66 41 d3 e9	 shr	 r9w, cl
  001a5	41 8d 4b f0	 lea	 ecx, DWORD PTR [r11-16]
  001a9	01 88 14 17 00
	00		 add	 DWORD PTR [rax+5908], ecx
  001af	66 44 89 88 10
	17 00 00	 mov	 WORD PTR [rax+5904], r9w
  001b7	eb 1b		 jmp	 SHORT $LN20@send_tree
$LN21@send_tree:
  001b9	0f b7 94 b8 a4
	0a 00 00	 movzx	 edx, WORD PTR [rax+rdi*4+2724]
  001c1	66 d3 e2	 shl	 dx, cl
  001c4	66 09 90 10 17
	00 00		 or	 WORD PTR [rax+5904], dx
  001cb	41 03 cb	 add	 ecx, r11d
  001ce	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN20@send_tree:
  001d4	41 ff ca	 dec	 r10d
$LN22@send_tree:

; 776  :             }
; 777  :             Assert(count >= 3 && count <= 6, " 3_6?");
; 778  :             send_code(s, REP_3_6, s->bl_tree); send_bits(s, count-3, 2);

  001d7	44 0f b7 98 e6
	0a 00 00	 movzx	 r11d, WORD PTR [rax+2790]
  001df	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  001e5	ba 10 00 00 00	 mov	 edx, 16
  001ea	41 2b d3	 sub	 edx, r11d
  001ed	3b ca		 cmp	 ecx, edx
  001ef	7e 65		 jle	 SHORT $LN19@send_tree
  001f1	44 0f b7 88 e4
	0a 00 00	 movzx	 r9d, WORD PTR [rax+2788]
  001f9	44 8b 40 28	 mov	 r8d, DWORD PTR [rax+40]
  001fd	41 0f b7 d1	 movzx	 edx, r9w
  00201	66 d3 e2	 shl	 dx, cl
  00204	66 09 90 10 17
	00 00		 or	 WORD PTR [rax+5904], dx
  0020b	0f b6 88 10 17
	00 00		 movzx	 ecx, BYTE PTR [rax+5904]
  00212	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  00216	41 88 0c 10	 mov	 BYTE PTR [r8+rdx], cl
  0021a	ff 40 28	 inc	 DWORD PTR [rax+40]
  0021d	0f b6 88 11 17
	00 00		 movzx	 ecx, BYTE PTR [rax+5905]
  00224	44 8b 40 28	 mov	 r8d, DWORD PTR [rax+40]
  00228	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  0022c	41 88 0c 10	 mov	 BYTE PTR [r8+rdx], cl
  00230	ff 40 28	 inc	 DWORD PTR [rax+40]
  00233	b9 10 00 00 00	 mov	 ecx, 16
  00238	2a 88 14 17 00
	00		 sub	 cl, BYTE PTR [rax+5908]
  0023e	66 41 d3 e9	 shr	 r9w, cl
  00242	41 8d 4b f0	 lea	 ecx, DWORD PTR [r11-16]
  00246	01 88 14 17 00
	00		 add	 DWORD PTR [rax+5908], ecx
  0024c	66 44 89 88 10
	17 00 00	 mov	 WORD PTR [rax+5904], r9w
  00254	eb 1a		 jmp	 SHORT $LN18@send_tree
$LN19@send_tree:
  00256	0f b7 90 e4 0a
	00 00		 movzx	 edx, WORD PTR [rax+2788]
  0025d	66 d3 e2	 shl	 dx, cl
  00260	66 09 90 10 17
	00 00		 or	 WORD PTR [rax+5904], dx
  00267	41 03 cb	 add	 ecx, r11d
  0026a	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN18@send_tree:
  00270	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  00276	83 f9 0e	 cmp	 ecx, 14
  00279	7e 61		 jle	 SHORT $LN17@send_tree
  0027b	44 8b 40 28	 mov	 r8d, DWORD PTR [rax+40]
  0027f	45 8d 4a fd	 lea	 r9d, DWORD PTR [r10-3]
  00283	41 0f b7 d1	 movzx	 edx, r9w
  00287	66 d3 e2	 shl	 dx, cl
  0028a	66 09 90 10 17
	00 00		 or	 WORD PTR [rax+5904], dx
  00291	0f b6 88 10 17
	00 00		 movzx	 ecx, BYTE PTR [rax+5904]
  00298	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  0029c	41 88 0c 10	 mov	 BYTE PTR [r8+rdx], cl
  002a0	ff 40 28	 inc	 DWORD PTR [rax+40]
  002a3	0f b6 88 11 17
	00 00		 movzx	 ecx, BYTE PTR [rax+5905]
  002aa	44 8b 40 28	 mov	 r8d, DWORD PTR [rax+40]
  002ae	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  002b2	41 88 0c 10	 mov	 BYTE PTR [r8+rdx], cl
  002b6	ff 40 28	 inc	 DWORD PTR [rax+40]
  002b9	b9 10 00 00 00	 mov	 ecx, 16
  002be	2a 88 14 17 00
	00		 sub	 cl, BYTE PTR [rax+5908]
  002c4	66 41 d3 e9	 shr	 r9w, cl
  002c8	83 80 14 17 00
	00 f2		 add	 DWORD PTR [rax+5908], -14
  002cf	66 44 89 88 10
	17 00 00	 mov	 WORD PTR [rax+5904], r9w
  002d7	e9 52 02 00 00	 jmp	 $LN5@send_tree
$LN17@send_tree:
  002dc	66 41 83 ea 03	 sub	 r10w, 3
  002e1	66 41 d3 e2	 shl	 r10w, cl
  002e5	66 44 09 90 10
	17 00 00	 or	 WORD PTR [rax+5904], r10w
  002ed	83 c1 02	 add	 ecx, 2
  002f0	e9 33 02 00 00	 jmp	 $LN46@send_tree
$LN23@send_tree:

; 779  : 
; 780  :         } else if (count <= 10) {
; 781  :             send_code(s, REPZ_3_10, s->bl_tree); send_bits(s, count-3, 3);

  002f5	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  002fb	ba 10 00 00 00	 mov	 edx, 16
  00300	41 83 fa 0a	 cmp	 r10d, 10
  00304	0f 8f 13 01 00
	00		 jg	 $LN14@send_tree
  0030a	44 0f b7 98 ea
	0a 00 00	 movzx	 r11d, WORD PTR [rax+2794]
  00312	41 2b d3	 sub	 edx, r11d
  00315	3b ca		 cmp	 ecx, edx
  00317	7e 65		 jle	 SHORT $LN13@send_tree
  00319	44 0f b7 88 e8
	0a 00 00	 movzx	 r9d, WORD PTR [rax+2792]
  00321	44 8b 40 28	 mov	 r8d, DWORD PTR [rax+40]
  00325	41 0f b7 d1	 movzx	 edx, r9w
  00329	66 d3 e2	 shl	 dx, cl
  0032c	66 09 90 10 17
	00 00		 or	 WORD PTR [rax+5904], dx
  00333	0f b6 88 10 17
	00 00		 movzx	 ecx, BYTE PTR [rax+5904]
  0033a	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  0033e	41 88 0c 10	 mov	 BYTE PTR [r8+rdx], cl
  00342	ff 40 28	 inc	 DWORD PTR [rax+40]
  00345	0f b6 88 11 17
	00 00		 movzx	 ecx, BYTE PTR [rax+5905]
  0034c	44 8b 40 28	 mov	 r8d, DWORD PTR [rax+40]
  00350	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  00354	41 88 0c 10	 mov	 BYTE PTR [r8+rdx], cl
  00358	ff 40 28	 inc	 DWORD PTR [rax+40]
  0035b	b9 10 00 00 00	 mov	 ecx, 16
  00360	2a 88 14 17 00
	00		 sub	 cl, BYTE PTR [rax+5908]
  00366	66 41 d3 e9	 shr	 r9w, cl
  0036a	41 8d 4b f0	 lea	 ecx, DWORD PTR [r11-16]
  0036e	01 88 14 17 00
	00		 add	 DWORD PTR [rax+5908], ecx
  00374	66 44 89 88 10
	17 00 00	 mov	 WORD PTR [rax+5904], r9w
  0037c	eb 1a		 jmp	 SHORT $LN12@send_tree
$LN13@send_tree:
  0037e	0f b7 90 e8 0a
	00 00		 movzx	 edx, WORD PTR [rax+2792]
  00385	66 d3 e2	 shl	 dx, cl
  00388	66 09 90 10 17
	00 00		 or	 WORD PTR [rax+5904], dx
  0038f	41 03 cb	 add	 ecx, r11d
  00392	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN12@send_tree:
  00398	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  0039e	83 f9 0d	 cmp	 ecx, 13
  003a1	7e 61		 jle	 SHORT $LN11@send_tree
  003a3	44 8b 40 28	 mov	 r8d, DWORD PTR [rax+40]
  003a7	45 8d 4a fd	 lea	 r9d, DWORD PTR [r10-3]
  003ab	41 0f b7 d1	 movzx	 edx, r9w
  003af	66 d3 e2	 shl	 dx, cl
  003b2	66 09 90 10 17
	00 00		 or	 WORD PTR [rax+5904], dx
  003b9	0f b6 88 10 17
	00 00		 movzx	 ecx, BYTE PTR [rax+5904]
  003c0	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  003c4	41 88 0c 10	 mov	 BYTE PTR [r8+rdx], cl
  003c8	ff 40 28	 inc	 DWORD PTR [rax+40]
  003cb	0f b6 88 11 17
	00 00		 movzx	 ecx, BYTE PTR [rax+5905]
  003d2	44 8b 40 28	 mov	 r8d, DWORD PTR [rax+40]
  003d6	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  003da	41 88 0c 10	 mov	 BYTE PTR [r8+rdx], cl
  003de	ff 40 28	 inc	 DWORD PTR [rax+40]
  003e1	b9 10 00 00 00	 mov	 ecx, 16
  003e6	2a 88 14 17 00
	00		 sub	 cl, BYTE PTR [rax+5908]
  003ec	66 41 d3 e9	 shr	 r9w, cl
  003f0	83 80 14 17 00
	00 f3		 add	 DWORD PTR [rax+5908], -13
  003f7	66 44 89 88 10
	17 00 00	 mov	 WORD PTR [rax+5904], r9w
  003ff	e9 2a 01 00 00	 jmp	 $LN5@send_tree
$LN11@send_tree:
  00404	66 41 83 ea 03	 sub	 r10w, 3
  00409	66 41 d3 e2	 shl	 r10w, cl
  0040d	66 44 09 90 10
	17 00 00	 or	 WORD PTR [rax+5904], r10w
  00415	83 c1 03	 add	 ecx, 3

; 782  : 
; 783  :         } else {

  00418	e9 0b 01 00 00	 jmp	 $LN46@send_tree
$LN14@send_tree:

; 784  :             send_code(s, REPZ_11_138, s->bl_tree); send_bits(s, count-11, 7);

  0041d	44 0f b7 98 ee
	0a 00 00	 movzx	 r11d, WORD PTR [rax+2798]
  00425	41 2b d3	 sub	 edx, r11d
  00428	3b ca		 cmp	 ecx, edx
  0042a	7e 65		 jle	 SHORT $LN8@send_tree
  0042c	44 0f b7 88 ec
	0a 00 00	 movzx	 r9d, WORD PTR [rax+2796]
  00434	44 8b 40 28	 mov	 r8d, DWORD PTR [rax+40]
  00438	41 0f b7 d1	 movzx	 edx, r9w
  0043c	66 d3 e2	 shl	 dx, cl
  0043f	66 09 90 10 17
	00 00		 or	 WORD PTR [rax+5904], dx
  00446	0f b6 88 10 17
	00 00		 movzx	 ecx, BYTE PTR [rax+5904]
  0044d	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  00451	41 88 0c 10	 mov	 BYTE PTR [r8+rdx], cl
  00455	ff 40 28	 inc	 DWORD PTR [rax+40]
  00458	0f b6 88 11 17
	00 00		 movzx	 ecx, BYTE PTR [rax+5905]
  0045f	44 8b 40 28	 mov	 r8d, DWORD PTR [rax+40]
  00463	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  00467	41 88 0c 10	 mov	 BYTE PTR [r8+rdx], cl
  0046b	ff 40 28	 inc	 DWORD PTR [rax+40]
  0046e	b9 10 00 00 00	 mov	 ecx, 16
  00473	2a 88 14 17 00
	00		 sub	 cl, BYTE PTR [rax+5908]
  00479	66 41 d3 e9	 shr	 r9w, cl
  0047d	41 8d 4b f0	 lea	 ecx, DWORD PTR [r11-16]
  00481	01 88 14 17 00
	00		 add	 DWORD PTR [rax+5908], ecx
  00487	66 44 89 88 10
	17 00 00	 mov	 WORD PTR [rax+5904], r9w
  0048f	eb 1a		 jmp	 SHORT $LN7@send_tree
$LN8@send_tree:
  00491	0f b7 90 ec 0a
	00 00		 movzx	 edx, WORD PTR [rax+2796]
  00498	66 d3 e2	 shl	 dx, cl
  0049b	66 09 90 10 17
	00 00		 or	 WORD PTR [rax+5904], dx
  004a2	41 03 cb	 add	 ecx, r11d
  004a5	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN7@send_tree:
  004ab	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  004b1	83 f9 09	 cmp	 ecx, 9
  004b4	7e 5e		 jle	 SHORT $LN6@send_tree
  004b6	44 8b 40 28	 mov	 r8d, DWORD PTR [rax+40]
  004ba	45 8d 4a f5	 lea	 r9d, DWORD PTR [r10-11]
  004be	41 0f b7 d1	 movzx	 edx, r9w
  004c2	66 d3 e2	 shl	 dx, cl
  004c5	66 09 90 10 17
	00 00		 or	 WORD PTR [rax+5904], dx
  004cc	0f b6 88 10 17
	00 00		 movzx	 ecx, BYTE PTR [rax+5904]
  004d3	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  004d7	41 88 0c 10	 mov	 BYTE PTR [r8+rdx], cl
  004db	ff 40 28	 inc	 DWORD PTR [rax+40]
  004de	0f b6 88 11 17
	00 00		 movzx	 ecx, BYTE PTR [rax+5905]
  004e5	44 8b 40 28	 mov	 r8d, DWORD PTR [rax+40]
  004e9	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  004ed	41 88 0c 10	 mov	 BYTE PTR [r8+rdx], cl
  004f1	ff 40 28	 inc	 DWORD PTR [rax+40]
  004f4	b9 10 00 00 00	 mov	 ecx, 16
  004f9	2a 88 14 17 00
	00		 sub	 cl, BYTE PTR [rax+5908]
  004ff	66 41 d3 e9	 shr	 r9w, cl
  00503	83 80 14 17 00
	00 f7		 add	 DWORD PTR [rax+5908], -9
  0050a	66 44 89 88 10
	17 00 00	 mov	 WORD PTR [rax+5904], r9w
  00512	eb 1a		 jmp	 SHORT $LN5@send_tree
$LN6@send_tree:
  00514	66 41 83 ea 0b	 sub	 r10w, 11
  00519	66 41 d3 e2	 shl	 r10w, cl
  0051d	66 44 09 90 10
	17 00 00	 or	 WORD PTR [rax+5904], r10w
  00525	83 c1 07	 add	 ecx, 7
$LN46@send_tree:
  00528	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN5@send_tree:

; 785  :         }
; 786  :         count = 0; prevlen = curlen;

  0052e	45 33 d2	 xor	 r10d, r10d
  00531	44 8b df	 mov	 r11d, edi

; 787  :         if (nextlen == 0) {

  00534	85 ed		 test	 ebp, ebp
  00536	75 0b		 jne	 SHORT $LN4@send_tree

; 788  :             max_count = 138, min_count = 3;

  00538	b9 8a 00 00 00	 mov	 ecx, 138		; 0000008aH
  0053d	45 8d 4a 03	 lea	 r9d, QWORD PTR [r10+3]
  00541	eb 18		 jmp	 SHORT $LN34@send_tree
$LN4@send_tree:

; 789  :         } else if (curlen == nextlen) {

  00543	3b fd		 cmp	 edi, ebp
  00545	75 0b		 jne	 SHORT $LN2@send_tree

; 790  :             max_count = 6, min_count = 3;

  00547	b9 06 00 00 00	 mov	 ecx, 6
  0054c	44 8d 49 fd	 lea	 r9d, QWORD PTR [rcx-3]

; 791  :         } else {

  00550	eb 09		 jmp	 SHORT $LN34@send_tree
$LN2@send_tree:

; 792  :             max_count = 7, min_count = 4;

  00552	b9 07 00 00 00	 mov	 ecx, 7
  00557	44 8d 49 fd	 lea	 r9d, QWORD PTR [rcx-3]
$LN34@send_tree:

; 765  : 
; 766  :     for (n = 0; n <= max_code; n++) {

  0055b	49 83 c6 04	 add	 r14, 4
  0055f	49 ff cf	 dec	 r15
  00562	0f 85 e9 fa ff
	ff		 jne	 $LL35@send_tree
  00568	4c 8b 7c 24 30	 mov	 r15, QWORD PTR [rsp+48]
  0056d	4c 8b 74 24 28	 mov	 r14, QWORD PTR [rsp+40]
  00572	48 8b 7c 24 20	 mov	 rdi, QWORD PTR [rsp+32]
  00577	48 8b 74 24 18	 mov	 rsi, QWORD PTR [rsp+24]
$LN33@send_tree:

; 793  :         }
; 794  :     }
; 795  : }

  0057c	5d		 pop	 rbp
  0057d	5b		 pop	 rbx
  0057e	c3		 ret	 0
send_tree ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\workdir\c++source\zlib128\zlib-1.2.8\trees.c
;	COMDAT build_bl_tree
_TEXT	SEGMENT
s$ = 48
build_bl_tree PROC					; COMDAT

; 803  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 804  :     int max_blindex;  /* index of last bit length code of non zero freq */
; 805  : 
; 806  :     /* Determine the bit length frequencies for literal and distance trees */
; 807  :     scan_tree(s, (ct_data *)s->dyn_ltree, s->l_desc.max_code);

  00006	44 8b 81 48 0b
	00 00		 mov	 r8d, DWORD PTR [rcx+2888]
  0000d	48 8d 91 bc 00
	00 00		 lea	 rdx, QWORD PTR [rcx+188]
  00014	48 8b d9	 mov	 rbx, rcx
  00017	e8 00 00 00 00	 call	 scan_tree

; 808  :     scan_tree(s, (ct_data *)s->dyn_dtree, s->d_desc.max_code);

  0001c	44 8b 83 60 0b
	00 00		 mov	 r8d, DWORD PTR [rbx+2912]
  00023	48 8d 93 b0 09
	00 00		 lea	 rdx, QWORD PTR [rbx+2480]
  0002a	48 8b cb	 mov	 rcx, rbx
  0002d	e8 00 00 00 00	 call	 scan_tree

; 809  : 
; 810  :     /* Build the bit length tree: */
; 811  :     build_tree(s, (tree_desc *)(&(s->bl_desc)));

  00032	48 8d 93 70 0b
	00 00		 lea	 rdx, QWORD PTR [rbx+2928]
  00039	48 8b cb	 mov	 rcx, rbx
  0003c	e8 00 00 00 00	 call	 build_tree

; 812  :     /* opt_len now includes the length of the tree representations, except
; 813  :      * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
; 814  :      */
; 815  : 
; 816  :     /* Determine the number of bit length codes to send. The pkzip format
; 817  :      * requires that at least 4 bit length codes be sent. (appnote.txt says
; 818  :      * 3 but the actual value used is 4.)
; 819  :      */
; 820  :     for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {

  00041	ba 12 00 00 00	 mov	 edx, 18
  00046	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:bl_order
  0004d	8b c2		 mov	 eax, edx
  0004f	90		 npad	 1
$LL4@build_bl_t:

; 821  :         if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;

  00050	42 0f b6 0c 00	 movzx	 ecx, BYTE PTR [rax+r8]
  00055	66 83 bc 8b a6
	0a 00 00 00	 cmp	 WORD PTR [rbx+rcx*4+2726], 0
  0005e	75 4e		 jne	 SHORT $LN14@build_bl_t
  00060	42 0f b6 4c 00
	ff		 movzx	 ecx, BYTE PTR [rax+r8-1]
  00066	66 83 bc 8b a6
	0a 00 00 00	 cmp	 WORD PTR [rbx+rcx*4+2726], 0
  0006f	75 3b		 jne	 SHORT $LN11@build_bl_t
  00071	42 0f b6 4c 00
	fe		 movzx	 ecx, BYTE PTR [rax+r8-2]
  00077	66 83 bc 8b a6
	0a 00 00 00	 cmp	 WORD PTR [rbx+rcx*4+2726], 0
  00080	75 25		 jne	 SHORT $LN12@build_bl_t
  00082	42 0f b6 4c 00
	fd		 movzx	 ecx, BYTE PTR [rax+r8-3]
  00088	66 83 bc 8b a6
	0a 00 00 00	 cmp	 WORD PTR [rbx+rcx*4+2726], 0
  00091	75 0f		 jne	 SHORT $LN13@build_bl_t

; 812  :     /* opt_len now includes the length of the tree representations, except
; 813  :      * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
; 814  :      */
; 815  : 
; 816  :     /* Determine the number of bit length codes to send. The pkzip format
; 817  :      * requires that at least 4 bit length codes be sent. (appnote.txt says
; 818  :      * 3 but the actual value used is 4.)
; 819  :      */
; 820  :     for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {

  00093	48 83 e8 04	 sub	 rax, 4
  00097	83 ea 04	 sub	 edx, 4
  0009a	48 83 f8 03	 cmp	 rax, 3
  0009e	7d b0		 jge	 SHORT $LL4@build_bl_t
  000a0	eb 0c		 jmp	 SHORT $LN14@build_bl_t
$LN13@build_bl_t:

; 821  :         if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;

  000a2	83 ea 03	 sub	 edx, 3
  000a5	eb 07		 jmp	 SHORT $LN14@build_bl_t
$LN12@build_bl_t:
  000a7	83 ea 02	 sub	 edx, 2

; 812  :     /* opt_len now includes the length of the tree representations, except
; 813  :      * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
; 814  :      */
; 815  : 
; 816  :     /* Determine the number of bit length codes to send. The pkzip format
; 817  :      * requires that at least 4 bit length codes be sent. (appnote.txt says
; 818  :      * 3 but the actual value used is 4.)
; 819  :      */
; 820  :     for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {

  000aa	eb 02		 jmp	 SHORT $LN14@build_bl_t
$LN11@build_bl_t:

; 821  :         if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;

  000ac	ff ca		 dec	 edx
$LN14@build_bl_t:

; 822  :     }
; 823  :     /* Update opt_len to include the bit length tree and counts */
; 824  :     s->opt_len += 3*(max_blindex+1) + 5+5+4;

  000ae	8d 0c 55 11 00
	00 00		 lea	 ecx, DWORD PTR [rdx*2+17]

; 825  :     Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
; 826  :             s->opt_len, s->static_len));
; 827  : 
; 828  :     return max_blindex;

  000b5	8b c2		 mov	 eax, edx
  000b7	03 ca		 add	 ecx, edx
  000b9	01 8b 00 17 00
	00		 add	 DWORD PTR [rbx+5888], ecx

; 829  : }

  000bf	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c3	5b		 pop	 rbx
  000c4	c3		 ret	 0
build_bl_tree ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\workdir\c++source\zlib128\zlib-1.2.8\trees.c
;	COMDAT send_all_trees
_TEXT	SEGMENT
s$ = 48
lcodes$ = 56
dcodes$ = 64
blcodes$ = 72
send_all_trees PROC					; COMDAT

; 839  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b d9	 mov	 rbx, rcx

; 840  :     int rank;                    /* index in bl_order */
; 841  : 
; 842  :     Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
; 843  :     Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
; 844  :             "too many codes");
; 845  :     Tracev((stderr, "\nbl counts: "));
; 846  :     send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */

  00012	8b 89 14 17 00
	00		 mov	 ecx, DWORD PTR [rcx+5908]
  00018	45 8b d9	 mov	 r11d, r9d
  0001b	41 8b f8	 mov	 edi, r8d
  0001e	8b f2		 mov	 esi, edx
  00020	83 f9 0b	 cmp	 ecx, 11
  00023	7e 5d		 jle	 SHORT $LN11@send_all_t
  00025	44 8d 92 ff fe
	ff ff		 lea	 r10d, DWORD PTR [rdx-257]
  0002c	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]
  0002f	41 0f b7 c2	 movzx	 eax, r10w
  00033	66 d3 e0	 shl	 ax, cl
  00036	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  0003a	66 09 83 10 17
	00 00		 or	 WORD PTR [rbx+5904], ax
  00041	0f b6 83 10 17
	00 00		 movzx	 eax, BYTE PTR [rbx+5904]
  00048	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  0004b	ff 43 28	 inc	 DWORD PTR [rbx+40]
  0004e	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]
  00051	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00055	0f b6 83 11 17
	00 00		 movzx	 eax, BYTE PTR [rbx+5905]
  0005c	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  0005f	ff 43 28	 inc	 DWORD PTR [rbx+40]
  00062	b9 10 00 00 00	 mov	 ecx, 16
  00067	2a 8b 14 17 00
	00		 sub	 cl, BYTE PTR [rbx+5908]
  0006d	66 41 d3 ea	 shr	 r10w, cl
  00071	83 83 14 17 00
	00 f5		 add	 DWORD PTR [rbx+5908], -11
  00078	66 44 89 93 10
	17 00 00	 mov	 WORD PTR [rbx+5904], r10w
  00080	eb 1e		 jmp	 SHORT $LN10@send_all_t
$LN11@send_all_t:
  00082	0f b7 c6	 movzx	 eax, si
  00085	ba 01 01 00 00	 mov	 edx, 257		; 00000101H
  0008a	66 2b c2	 sub	 ax, dx
  0008d	66 d3 e0	 shl	 ax, cl
  00090	66 09 83 10 17
	00 00		 or	 WORD PTR [rbx+5904], ax
  00097	8d 41 05	 lea	 eax, DWORD PTR [rcx+5]
  0009a	89 83 14 17 00
	00		 mov	 DWORD PTR [rbx+5908], eax
$LN10@send_all_t:

; 847  :     send_bits(s, dcodes-1,   5);

  000a0	8b 8b 14 17 00
	00		 mov	 ecx, DWORD PTR [rbx+5908]
  000a6	83 f9 0b	 cmp	 ecx, 11
  000a9	7e 59		 jle	 SHORT $LN9@send_all_t
  000ab	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]
  000ae	41 ff c8	 dec	 r8d
  000b1	41 0f b7 c0	 movzx	 eax, r8w
  000b5	66 d3 e0	 shl	 ax, cl
  000b8	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  000bc	66 09 83 10 17
	00 00		 or	 WORD PTR [rbx+5904], ax
  000c3	0f b6 83 10 17
	00 00		 movzx	 eax, BYTE PTR [rbx+5904]
  000ca	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  000cd	ff 43 28	 inc	 DWORD PTR [rbx+40]
  000d0	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]
  000d3	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  000d7	0f b6 83 11 17
	00 00		 movzx	 eax, BYTE PTR [rbx+5905]
  000de	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  000e1	ff 43 28	 inc	 DWORD PTR [rbx+40]
  000e4	b9 10 00 00 00	 mov	 ecx, 16
  000e9	2a 8b 14 17 00
	00		 sub	 cl, BYTE PTR [rbx+5908]
  000ef	66 41 d3 e8	 shr	 r8w, cl
  000f3	83 83 14 17 00
	00 f5		 add	 DWORD PTR [rbx+5908], -11
  000fa	66 44 89 83 10
	17 00 00	 mov	 WORD PTR [rbx+5904], r8w
  00102	eb 17		 jmp	 SHORT $LN8@send_all_t
$LN9@send_all_t:
  00104	41 8d 40 ff	 lea	 eax, DWORD PTR [r8-1]
  00108	66 d3 e0	 shl	 ax, cl
  0010b	66 09 83 10 17
	00 00		 or	 WORD PTR [rbx+5904], ax
  00112	8d 41 05	 lea	 eax, DWORD PTR [rcx+5]
  00115	89 83 14 17 00
	00		 mov	 DWORD PTR [rbx+5908], eax
$LN8@send_all_t:

; 848  :     send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */

  0011b	8b 8b 14 17 00
	00		 mov	 ecx, DWORD PTR [rbx+5908]
  00121	83 f9 0c	 cmp	 ecx, 12
  00124	7e 5a		 jle	 SHORT $LN7@send_all_t
  00126	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]
  00129	45 8d 43 fc	 lea	 r8d, DWORD PTR [r11-4]
  0012d	41 0f b7 c0	 movzx	 eax, r8w
  00131	66 d3 e0	 shl	 ax, cl
  00134	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00138	66 09 83 10 17
	00 00		 or	 WORD PTR [rbx+5904], ax
  0013f	0f b6 83 10 17
	00 00		 movzx	 eax, BYTE PTR [rbx+5904]
  00146	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00149	ff 43 28	 inc	 DWORD PTR [rbx+40]
  0014c	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]
  0014f	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00153	0f b6 83 11 17
	00 00		 movzx	 eax, BYTE PTR [rbx+5905]
  0015a	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  0015d	ff 43 28	 inc	 DWORD PTR [rbx+40]
  00160	b9 10 00 00 00	 mov	 ecx, 16
  00165	2a 8b 14 17 00
	00		 sub	 cl, BYTE PTR [rbx+5908]
  0016b	66 41 d3 e8	 shr	 r8w, cl
  0016f	83 83 14 17 00
	00 f4		 add	 DWORD PTR [rbx+5908], -12
  00176	66 44 89 83 10
	17 00 00	 mov	 WORD PTR [rbx+5904], r8w
  0017e	eb 17		 jmp	 SHORT $LN6@send_all_t
$LN7@send_all_t:
  00180	41 8d 43 fc	 lea	 eax, DWORD PTR [r11-4]
  00184	66 d3 e0	 shl	 ax, cl
  00187	66 09 83 10 17
	00 00		 or	 WORD PTR [rbx+5904], ax
  0018e	8d 41 04	 lea	 eax, DWORD PTR [rcx+4]
  00191	89 83 14 17 00
	00		 mov	 DWORD PTR [rbx+5908], eax
$LN6@send_all_t:

; 849  :     for (rank = 0; rank < blcodes; rank++) {

  00197	45 85 db	 test	 r11d, r11d
  0019a	0f 8e a5 00 00
	00		 jle	 $LN3@send_all_t
  001a0	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:bl_order
  001a7	4d 8b d3	 mov	 r10, r11
  001aa	66 0f 1f 44 00
	00		 npad	 6
$LL5@send_all_t:

; 850  :         Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
; 851  :         send_bits(s, s->bl_tree[bl_order[rank]].Len, 3);

  001b0	8b 8b 14 17 00
	00		 mov	 ecx, DWORD PTR [rbx+5908]
  001b6	41 0f b6 01	 movzx	 eax, BYTE PTR [r9]
  001ba	83 f9 0d	 cmp	 ecx, 13
  001bd	7e 5f		 jle	 SHORT $LN2@send_all_t
  001bf	44 0f b7 84 83
	a6 0a 00 00	 movzx	 r8d, WORD PTR [rbx+rax*4+2726]
  001c8	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]
  001cb	41 0f b7 c0	 movzx	 eax, r8w
  001cf	66 d3 e0	 shl	 ax, cl
  001d2	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  001d6	66 09 83 10 17
	00 00		 or	 WORD PTR [rbx+5904], ax
  001dd	0f b6 83 10 17
	00 00		 movzx	 eax, BYTE PTR [rbx+5904]
  001e4	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  001e7	ff 43 28	 inc	 DWORD PTR [rbx+40]
  001ea	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]
  001ed	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  001f1	0f b6 83 11 17
	00 00		 movzx	 eax, BYTE PTR [rbx+5905]
  001f8	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  001fb	ff 43 28	 inc	 DWORD PTR [rbx+40]
  001fe	b9 10 00 00 00	 mov	 ecx, 16
  00203	2a 8b 14 17 00
	00		 sub	 cl, BYTE PTR [rbx+5908]
  00209	66 41 d3 e8	 shr	 r8w, cl
  0020d	83 83 14 17 00
	00 f3		 add	 DWORD PTR [rbx+5908], -13
  00214	66 44 89 83 10
	17 00 00	 mov	 WORD PTR [rbx+5904], r8w
  0021c	eb 1b		 jmp	 SHORT $LN4@send_all_t
$LN2@send_all_t:
  0021e	0f b7 94 83 a6
	0a 00 00	 movzx	 edx, WORD PTR [rbx+rax*4+2726]
  00226	8d 41 03	 lea	 eax, DWORD PTR [rcx+3]
  00229	66 d3 e2	 shl	 dx, cl
  0022c	89 83 14 17 00
	00		 mov	 DWORD PTR [rbx+5908], eax
  00232	66 09 93 10 17
	00 00		 or	 WORD PTR [rbx+5904], dx
$LN4@send_all_t:

; 849  :     for (rank = 0; rank < blcodes; rank++) {

  00239	49 ff c1	 inc	 r9
  0023c	49 ff ca	 dec	 r10
  0023f	0f 85 6b ff ff
	ff		 jne	 $LL5@send_all_t
$LN3@send_all_t:

; 852  :     }
; 853  :     Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));
; 854  : 
; 855  :     send_tree(s, (ct_data *)s->dyn_ltree, lcodes-1); /* literal tree */

  00245	44 8d 46 ff	 lea	 r8d, DWORD PTR [rsi-1]
  00249	48 8d 93 bc 00
	00 00		 lea	 rdx, QWORD PTR [rbx+188]
  00250	48 8b cb	 mov	 rcx, rbx
  00253	e8 00 00 00 00	 call	 send_tree

; 856  :     Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));
; 857  : 
; 858  :     send_tree(s, (ct_data *)s->dyn_dtree, dcodes-1); /* distance tree */

  00258	44 8d 47 ff	 lea	 r8d, DWORD PTR [rdi-1]
  0025c	48 8d 93 b0 09
	00 00		 lea	 rdx, QWORD PTR [rbx+2480]
  00263	48 8b cb	 mov	 rcx, rbx

; 859  :     Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
; 860  : }

  00266	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0026b	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00270	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00274	5f		 pop	 rdi

; 856  :     Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));
; 857  : 
; 858  :     send_tree(s, (ct_data *)s->dyn_dtree, dcodes-1); /* distance tree */

  00275	e9 00 00 00 00	 jmp	 send_tree
send_all_trees ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\workdir\c++source\zlib128\zlib-1.2.8\trees.c
;	COMDAT compress_block
_TEXT	SEGMENT
s$ = 32
ltree$ = 40
dtree$ = 48
compress_block PROC					; COMDAT

; 1064 : {

  00000	40 53		 push	 rbx
  00002	41 56		 push	 r14
  00004	48 83 ec 08	 sub	 rsp, 8
  00008	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp

; 1065 :     unsigned dist;      /* distance of matched string */
; 1066 :     int lc;             /* match length or unmatched char (if dist == 0) */
; 1067 :     unsigned lx = 0;    /* running index in l_buf */

  0000d	33 ed		 xor	 ebp, ebp
  0000f	4c 89 3c 24	 mov	 QWORD PTR [rsp], r15
  00013	4d 8b f8	 mov	 r15, r8
  00016	4c 8b f2	 mov	 r14, rdx
  00019	48 8b c1	 mov	 rax, rcx

; 1068 :     unsigned code;      /* the code to send */
; 1069 :     int extra;          /* number of extra bits to send */
; 1070 : 
; 1071 :     if (s->last_lit != 0) do {

  0001c	8d 5d 10	 lea	 ebx, QWORD PTR [rbp+16]
  0001f	39 a9 f4 16 00
	00		 cmp	 DWORD PTR [rcx+5876], ebp
  00025	0f 84 6a 03 00
	00		 je	 $LN17@compress_b
  0002b	4c 89 64 24 38	 mov	 QWORD PTR [rsp+56], r12
  00030	48 89 74 24 28	 mov	 QWORD PTR [rsp+40], rsi
  00035	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  0003a	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:__ImageBase
$LL19@compress_b:

; 1072 :         dist = s->d_buf[lx];

  00041	48 8b 88 f8 16
	00 00		 mov	 rcx, QWORD PTR [rax+5880]

; 1073 :         lc = s->l_buf[lx++];
; 1074 :         if (dist == 0) {
; 1075 :             send_code(s, lc, ltree); /* send a literal byte */

  00048	8b d3		 mov	 edx, ebx
  0004a	44 0f b7 14 69	 movzx	 r10d, WORD PTR [rcx+rbp*2]
  0004f	48 8b 88 e8 16
	00 00		 mov	 rcx, QWORD PTR [rax+5864]
  00056	44 0f b6 5c 0d
	00		 movzx	 r11d, BYTE PTR [rbp+rcx]
  0005c	ff c5		 inc	 ebp
  0005e	45 85 d2	 test	 r10d, r10d
  00061	0f 85 90 00 00
	00		 jne	 $LN16@compress_b
  00067	49 63 cb	 movsxd	 rcx, r11d
  0006a	4d 8d 04 8e	 lea	 r8, QWORD PTR [r14+rcx*4]
  0006e	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  00074	45 0f b7 50 02	 movzx	 r10d, WORD PTR [r8+2]
  00079	41 2b d2	 sub	 edx, r10d
  0007c	3b ca		 cmp	 ecx, edx
  0007e	7e 61		 jle	 SHORT $LN15@compress_b
  00080	45 0f b7 08	 movzx	 r9d, WORD PTR [r8]
  00084	44 8b 40 28	 mov	 r8d, DWORD PTR [rax+40]
  00088	41 0f b7 d1	 movzx	 edx, r9w
  0008c	66 d3 e2	 shl	 dx, cl
  0008f	66 09 90 10 17
	00 00		 or	 WORD PTR [rax+5904], dx
  00096	0f b6 88 10 17
	00 00		 movzx	 ecx, BYTE PTR [rax+5904]
  0009d	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  000a1	41 88 0c 10	 mov	 BYTE PTR [r8+rdx], cl
  000a5	ff 40 28	 inc	 DWORD PTR [rax+40]
  000a8	0f b6 88 11 17
	00 00		 movzx	 ecx, BYTE PTR [rax+5905]
  000af	44 8b 40 28	 mov	 r8d, DWORD PTR [rax+40]
  000b3	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  000b7	41 88 0c 10	 mov	 BYTE PTR [r8+rdx], cl
  000bb	ff 40 28	 inc	 DWORD PTR [rax+40]
  000be	8b cb		 mov	 ecx, ebx
  000c0	2a 88 14 17 00
	00		 sub	 cl, BYTE PTR [rax+5908]
  000c6	66 41 d3 e9	 shr	 r9w, cl
  000ca	41 8d 4a f0	 lea	 ecx, DWORD PTR [r10-16]
  000ce	01 88 14 17 00
	00		 add	 DWORD PTR [rax+5908], ecx
  000d4	66 44 89 88 10
	17 00 00	 mov	 WORD PTR [rax+5904], r9w
  000dc	e9 99 02 00 00	 jmp	 $LN18@compress_b
$LN15@compress_b:
  000e1	41 0f b7 10	 movzx	 edx, WORD PTR [r8]
  000e5	66 d3 e2	 shl	 dx, cl
  000e8	66 09 90 10 17
	00 00		 or	 WORD PTR [rax+5904], dx
  000ef	41 03 ca	 add	 ecx, r10d

; 1076 :             Tracecv(isgraph(lc), (stderr," '%c' ", lc));
; 1077 :         } else {

  000f2	e9 7d 02 00 00	 jmp	 $LN28@compress_b
$LN16@compress_b:

; 1078 :             /* Here, lc is the match length - MIN_MATCH */
; 1079 :             code = _length_code[lc];

  000f7	43 0f b6 b4 23
	00 00 00 00	 movzx	 esi, BYTE PTR _length_code[r11+r12]

; 1080 :             send_code(s, code+LITERALS+1, ltree); /* send the length code */

  00100	8d 8e 01 01 00
	00		 lea	 ecx, DWORD PTR [rsi+257]
  00106	41 0f b7 7c 8e
	02		 movzx	 edi, WORD PTR [r14+rcx*4+2]
  0010c	4d 8d 04 8e	 lea	 r8, QWORD PTR [r14+rcx*4]
  00110	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  00116	2b d7		 sub	 edx, edi
  00118	3b ca		 cmp	 ecx, edx
  0011a	7e 5d		 jle	 SHORT $LN12@compress_b
  0011c	45 0f b7 08	 movzx	 r9d, WORD PTR [r8]
  00120	44 8b 40 28	 mov	 r8d, DWORD PTR [rax+40]
  00124	41 0f b7 d1	 movzx	 edx, r9w
  00128	66 d3 e2	 shl	 dx, cl
  0012b	66 09 90 10 17
	00 00		 or	 WORD PTR [rax+5904], dx
  00132	0f b6 88 10 17
	00 00		 movzx	 ecx, BYTE PTR [rax+5904]
  00139	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  0013d	41 88 0c 10	 mov	 BYTE PTR [r8+rdx], cl
  00141	ff 40 28	 inc	 DWORD PTR [rax+40]
  00144	0f b6 88 11 17
	00 00		 movzx	 ecx, BYTE PTR [rax+5905]
  0014b	44 8b 40 28	 mov	 r8d, DWORD PTR [rax+40]
  0014f	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  00153	41 88 0c 10	 mov	 BYTE PTR [r8+rdx], cl
  00157	ff 40 28	 inc	 DWORD PTR [rax+40]
  0015a	8b cb		 mov	 ecx, ebx
  0015c	2a 88 14 17 00
	00		 sub	 cl, BYTE PTR [rax+5908]
  00162	66 41 d3 e9	 shr	 r9w, cl
  00166	8d 4f f0	 lea	 ecx, DWORD PTR [rdi-16]
  00169	01 88 14 17 00
	00		 add	 DWORD PTR [rax+5908], ecx
  0016f	66 44 89 88 10
	17 00 00	 mov	 WORD PTR [rax+5904], r9w
  00177	eb 16		 jmp	 SHORT $LN11@compress_b
$LN12@compress_b:
  00179	41 0f b7 10	 movzx	 edx, WORD PTR [r8]
  0017d	66 d3 e2	 shl	 dx, cl
  00180	66 09 90 10 17
	00 00		 or	 WORD PTR [rax+5904], dx
  00187	03 cf		 add	 ecx, edi
  00189	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN11@compress_b:

; 1081 :             extra = extra_lbits[code];

  0018f	45 8b 8c b4 00
	00 00 00	 mov	 r9d, DWORD PTR extra_lbits[r12+rsi*4]

; 1082 :             if (extra != 0) {

  00197	45 85 c9	 test	 r9d, r9d
  0019a	0f 84 86 00 00
	00		 je	 $LN8@compress_b

; 1083 :                 lc -= base_length[code];
; 1084 :                 send_bits(s, lc, extra);       /* send the extra length bits */

  001a0	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  001a6	45 2b 9c b4 00
	00 00 00	 sub	 r11d, DWORD PTR base_length[r12+rsi*4]
  001ae	8b d3		 mov	 edx, ebx
  001b0	41 2b d1	 sub	 edx, r9d
  001b3	3b ca		 cmp	 ecx, edx
  001b5	7e 5a		 jle	 SHORT $LN9@compress_b
  001b7	44 8b 40 28	 mov	 r8d, DWORD PTR [rax+40]
  001bb	41 0f b7 d3	 movzx	 edx, r11w
  001bf	66 d3 e2	 shl	 dx, cl
  001c2	66 09 90 10 17
	00 00		 or	 WORD PTR [rax+5904], dx
  001c9	0f b6 88 10 17
	00 00		 movzx	 ecx, BYTE PTR [rax+5904]
  001d0	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  001d4	41 88 0c 10	 mov	 BYTE PTR [r8+rdx], cl
  001d8	ff 40 28	 inc	 DWORD PTR [rax+40]
  001db	0f b6 88 11 17
	00 00		 movzx	 ecx, BYTE PTR [rax+5905]
  001e2	44 8b 40 28	 mov	 r8d, DWORD PTR [rax+40]
  001e6	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  001ea	41 88 0c 10	 mov	 BYTE PTR [r8+rdx], cl
  001ee	ff 40 28	 inc	 DWORD PTR [rax+40]
  001f1	8b cb		 mov	 ecx, ebx
  001f3	2a 88 14 17 00
	00		 sub	 cl, BYTE PTR [rax+5908]
  001f9	66 41 d3 eb	 shr	 r11w, cl
  001fd	41 8d 49 f0	 lea	 ecx, DWORD PTR [r9-16]
  00201	01 88 14 17 00
	00		 add	 DWORD PTR [rax+5908], ecx
  00207	66 44 89 98 10
	17 00 00	 mov	 WORD PTR [rax+5904], r11w
  0020f	eb 15		 jmp	 SHORT $LN8@compress_b
$LN9@compress_b:
  00211	66 41 d3 e3	 shl	 r11w, cl
  00215	66 44 09 98 10
	17 00 00	 or	 WORD PTR [rax+5904], r11w
  0021d	41 03 c9	 add	 ecx, r9d
  00220	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN8@compress_b:

; 1085 :             }
; 1086 :             dist--; /* dist is now the match distance - 1 */

  00226	41 ff ca	 dec	 r10d

; 1087 :             code = d_code(dist);

  00229	41 81 fa 00 01
	00 00		 cmp	 r10d, 256		; 00000100H
  00230	73 0b		 jae	 SHORT $LN23@compress_b
  00232	43 0f b6 94 22
	00 00 00 00	 movzx	 edx, BYTE PTR _dist_code[r10+r12]
  0023b	eb 15		 jmp	 SHORT $LN24@compress_b
$LN23@compress_b:
  0023d	41 8b ca	 mov	 ecx, r10d
  00240	c1 e9 07	 shr	 ecx, 7
  00243	81 c1 00 01 00
	00		 add	 ecx, 256		; 00000100H
  00249	42 0f b6 94 21
	00 00 00 00	 movzx	 edx, BYTE PTR _dist_code[rcx+r12]
$LN24@compress_b:

; 1088 :             Assert (code < D_CODES, "bad d_code");
; 1089 : 
; 1090 :             send_code(s, code, dtree);       /* send the distance code */

  00252	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  00258	4c 8d 1c 95 00
	00 00 00	 lea	 r11, QWORD PTR [rdx*4]
  00260	8b d3		 mov	 edx, ebx
  00262	43 0f b7 7c 3b
	02		 movzx	 edi, WORD PTR [r11+r15+2]
  00268	2b d7		 sub	 edx, edi
  0026a	3b ca		 cmp	 ecx, edx
  0026c	7e 5e		 jle	 SHORT $LN7@compress_b
  0026e	47 0f b7 0c 3b	 movzx	 r9d, WORD PTR [r11+r15]
  00273	44 8b 40 28	 mov	 r8d, DWORD PTR [rax+40]
  00277	41 0f b7 d1	 movzx	 edx, r9w
  0027b	66 d3 e2	 shl	 dx, cl
  0027e	66 09 90 10 17
	00 00		 or	 WORD PTR [rax+5904], dx
  00285	0f b6 88 10 17
	00 00		 movzx	 ecx, BYTE PTR [rax+5904]
  0028c	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  00290	41 88 0c 10	 mov	 BYTE PTR [r8+rdx], cl
  00294	ff 40 28	 inc	 DWORD PTR [rax+40]
  00297	0f b6 88 11 17
	00 00		 movzx	 ecx, BYTE PTR [rax+5905]
  0029e	44 8b 40 28	 mov	 r8d, DWORD PTR [rax+40]
  002a2	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  002a6	41 88 0c 10	 mov	 BYTE PTR [r8+rdx], cl
  002aa	ff 40 28	 inc	 DWORD PTR [rax+40]
  002ad	8b cb		 mov	 ecx, ebx
  002af	2a 88 14 17 00
	00		 sub	 cl, BYTE PTR [rax+5908]
  002b5	66 41 d3 e9	 shr	 r9w, cl
  002b9	8d 4f f0	 lea	 ecx, DWORD PTR [rdi-16]
  002bc	01 88 14 17 00
	00		 add	 DWORD PTR [rax+5908], ecx
  002c2	66 44 89 88 10
	17 00 00	 mov	 WORD PTR [rax+5904], r9w
  002ca	eb 17		 jmp	 SHORT $LN6@compress_b
$LN7@compress_b:
  002cc	43 0f b7 14 3b	 movzx	 edx, WORD PTR [r11+r15]
  002d1	66 d3 e2	 shl	 dx, cl
  002d4	66 09 90 10 17
	00 00		 or	 WORD PTR [rax+5904], dx
  002db	03 cf		 add	 ecx, edi
  002dd	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN6@compress_b:

; 1091 :             extra = extra_dbits[code];

  002e3	47 8b 8c 23 00
	00 00 00	 mov	 r9d, DWORD PTR extra_dbits[r11+r12]

; 1092 :             if (extra != 0) {

  002eb	45 85 c9	 test	 r9d, r9d
  002ee	0f 84 86 00 00
	00		 je	 $LN18@compress_b

; 1093 :                 dist -= base_dist[code];
; 1094 :                 send_bits(s, dist, extra);   /* send the extra distance bits */

  002f4	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  002fa	47 2b 94 23 00
	00 00 00	 sub	 r10d, DWORD PTR base_dist[r11+r12]
  00302	8b d3		 mov	 edx, ebx
  00304	41 2b d1	 sub	 edx, r9d
  00307	3b ca		 cmp	 ecx, edx
  00309	7e 5a		 jle	 SHORT $LN4@compress_b
  0030b	44 8b 40 28	 mov	 r8d, DWORD PTR [rax+40]
  0030f	41 0f b7 d2	 movzx	 edx, r10w
  00313	66 d3 e2	 shl	 dx, cl
  00316	66 09 90 10 17
	00 00		 or	 WORD PTR [rax+5904], dx
  0031d	0f b6 88 10 17
	00 00		 movzx	 ecx, BYTE PTR [rax+5904]
  00324	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  00328	41 88 0c 10	 mov	 BYTE PTR [r8+rdx], cl
  0032c	ff 40 28	 inc	 DWORD PTR [rax+40]
  0032f	0f b6 88 11 17
	00 00		 movzx	 ecx, BYTE PTR [rax+5905]
  00336	44 8b 40 28	 mov	 r8d, DWORD PTR [rax+40]
  0033a	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  0033e	41 88 0c 10	 mov	 BYTE PTR [r8+rdx], cl
  00342	ff 40 28	 inc	 DWORD PTR [rax+40]
  00345	8b cb		 mov	 ecx, ebx
  00347	2a 88 14 17 00
	00		 sub	 cl, BYTE PTR [rax+5908]
  0034d	66 41 d3 ea	 shr	 r10w, cl
  00351	41 8d 49 f0	 lea	 ecx, DWORD PTR [r9-16]
  00355	01 88 14 17 00
	00		 add	 DWORD PTR [rax+5908], ecx
  0035b	66 44 89 90 10
	17 00 00	 mov	 WORD PTR [rax+5904], r10w
  00363	eb 15		 jmp	 SHORT $LN18@compress_b
$LN4@compress_b:
  00365	66 41 d3 e2	 shl	 r10w, cl
  00369	66 44 09 90 10
	17 00 00	 or	 WORD PTR [rax+5904], r10w
  00371	41 03 c9	 add	 ecx, r9d
$LN28@compress_b:
  00374	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN18@compress_b:

; 1095 :             }
; 1096 :         } /* literal or match pair ? */
; 1097 : 
; 1098 :         /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
; 1099 :         Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
; 1100 :                "pendingBuf overflow");
; 1101 : 
; 1102 :     } while (lx < s->last_lit);

  0037a	3b a8 f4 16 00
	00		 cmp	 ebp, DWORD PTR [rax+5876]
  00380	0f 82 bb fc ff
	ff		 jb	 $LL19@compress_b
  00386	4c 8b 64 24 38	 mov	 r12, QWORD PTR [rsp+56]
  0038b	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]
  00390	48 8b 74 24 28	 mov	 rsi, QWORD PTR [rsp+40]
$LN17@compress_b:

; 1103 : 
; 1104 :     send_code(s, END_BLOCK, ltree);

  00395	45 0f b7 9e 02
	04 00 00	 movzx	 r11d, WORD PTR [r14+1026]
  0039d	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  003a3	4c 8b 3c 24	 mov	 r15, QWORD PTR [rsp]
  003a7	48 8b 6c 24 20	 mov	 rbp, QWORD PTR [rsp+32]
  003ac	8b d3		 mov	 edx, ebx
  003ae	41 2b d3	 sub	 edx, r11d
  003b1	3b ca		 cmp	 ecx, edx
  003b3	7e 69		 jle	 SHORT $LN2@compress_b
  003b5	45 0f b7 96 00
	04 00 00	 movzx	 r10d, WORD PTR [r14+1024]
  003bd	44 8b 48 28	 mov	 r9d, DWORD PTR [rax+40]
  003c1	4c 8b 40 10	 mov	 r8, QWORD PTR [rax+16]
  003c5	41 0f b7 d2	 movzx	 edx, r10w
  003c9	66 d3 e2	 shl	 dx, cl
  003cc	66 09 90 10 17
	00 00		 or	 WORD PTR [rax+5904], dx
  003d3	0f b6 90 10 17
	00 00		 movzx	 edx, BYTE PTR [rax+5904]
  003da	43 88 14 01	 mov	 BYTE PTR [r9+r8], dl
  003de	ff 40 28	 inc	 DWORD PTR [rax+40]
  003e1	44 8b 48 28	 mov	 r9d, DWORD PTR [rax+40]
  003e5	0f b6 90 11 17
	00 00		 movzx	 edx, BYTE PTR [rax+5905]
  003ec	4c 8b 40 10	 mov	 r8, QWORD PTR [rax+16]
  003f0	43 88 14 01	 mov	 BYTE PTR [r9+r8], dl
  003f4	2a 98 14 17 00
	00		 sub	 bl, BYTE PTR [rax+5908]
  003fa	ff 40 28	 inc	 DWORD PTR [rax+40]
  003fd	0f b6 cb	 movzx	 ecx, bl
  00400	66 41 d3 ea	 shr	 r10w, cl
  00404	41 8d 4b f0	 lea	 ecx, DWORD PTR [r11-16]
  00408	01 88 14 17 00
	00		 add	 DWORD PTR [rax+5908], ecx
  0040e	66 44 89 90 10
	17 00 00	 mov	 WORD PTR [rax+5904], r10w

; 1105 : }

  00416	48 83 c4 08	 add	 rsp, 8
  0041a	41 5e		 pop	 r14
  0041c	5b		 pop	 rbx
  0041d	c3		 ret	 0
$LN2@compress_b:

; 1103 : 
; 1104 :     send_code(s, END_BLOCK, ltree);

  0041e	41 0f b7 96 00
	04 00 00	 movzx	 edx, WORD PTR [r14+1024]
  00426	66 d3 e2	 shl	 dx, cl
  00429	66 09 90 10 17
	00 00		 or	 WORD PTR [rax+5904], dx
  00430	41 03 cb	 add	 ecx, r11d
  00433	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx

; 1105 : }

  00439	48 83 c4 08	 add	 rsp, 8
  0043d	41 5e		 pop	 r14
  0043f	5b		 pop	 rbx
  00440	c3		 ret	 0
compress_block ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\workdir\c++source\zlib128\zlib-1.2.8\trees.c
;	COMDAT detect_data_type
_TEXT	SEGMENT
s$ = 8
detect_data_type PROC					; COMDAT

; 1122 : {

  00000	4c 8b c9	 mov	 r9, rcx

; 1123 :     /* black_mask is the bit mask of black-listed bytes
; 1124 :      * set bits 0..6, 14..25, and 28..31
; 1125 :      * 0xf3ffc07f = binary 11110011111111111100000001111111
; 1126 :      */
; 1127 :     unsigned long black_mask = 0xf3ffc07fUL;
; 1128 :     int n;
; 1129 : 
; 1130 :     /* Check for non-textual ("black-listed") bytes. */
; 1131 :     for (n = 0; n <= 31; n++, black_mask >>= 1)

  00003	33 d2		 xor	 edx, edx
  00005	41 b8 7f c0 ff
	f3		 mov	 r8d, -201342849		; f3ffc07fH
  0000b	48 8d 81 bc 00
	00 00		 lea	 rax, QWORD PTR [rcx+188]
$LL10@detect_dat:

; 1132 :         if ((black_mask & 1) && (s->dyn_ltree[n].Freq != 0))

  00012	41 f6 c0 01	 test	 r8b, 1
  00016	74 06		 je	 SHORT $LN9@detect_dat
  00018	66 83 38 00	 cmp	 WORD PTR [rax], 0
  0001c	75 50		 jne	 SHORT $LN15@detect_dat
$LN9@detect_dat:

; 1123 :     /* black_mask is the bit mask of black-listed bytes
; 1124 :      * set bits 0..6, 14..25, and 28..31
; 1125 :      * 0xf3ffc07f = binary 11110011111111111100000001111111
; 1126 :      */
; 1127 :     unsigned long black_mask = 0xf3ffc07fUL;
; 1128 :     int n;
; 1129 : 
; 1130 :     /* Check for non-textual ("black-listed") bytes. */
; 1131 :     for (n = 0; n <= 31; n++, black_mask >>= 1)

  0001e	48 ff c2	 inc	 rdx
  00021	48 83 c0 04	 add	 rax, 4
  00025	41 d1 e8	 shr	 r8d, 1
  00028	48 83 fa 1f	 cmp	 rdx, 31
  0002c	7e e4		 jle	 SHORT $LL10@detect_dat

; 1133 :             return Z_BINARY;
; 1134 : 
; 1135 :     /* Check for textual ("white-listed") bytes. */
; 1136 :     if (s->dyn_ltree[9].Freq != 0 || s->dyn_ltree[10].Freq != 0
; 1137 :             || s->dyn_ltree[13].Freq != 0)

  0002e	66 83 b9 e0 00
	00 00 00	 cmp	 WORD PTR [rcx+224], 0
  00036	75 39		 jne	 SHORT $LN5@detect_dat
  00038	66 83 b9 e4 00
	00 00 00	 cmp	 WORD PTR [rcx+228], 0
  00040	75 2f		 jne	 SHORT $LN5@detect_dat
  00042	66 83 b9 f0 00
	00 00 00	 cmp	 WORD PTR [rcx+240], 0
  0004a	75 25		 jne	 SHORT $LN5@detect_dat

; 1139 :     for (n = 32; n < LITERALS; n++)

  0004c	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00051	49 8d 81 3c 01
	00 00		 lea	 rax, QWORD PTR [r9+316]
$LL4@detect_dat:

; 1140 :         if (s->dyn_ltree[n].Freq != 0)

  00058	66 83 38 00	 cmp	 WORD PTR [rax], 0
  0005c	75 13		 jne	 SHORT $LN5@detect_dat

; 1139 :     for (n = 32; n < LITERALS; n++)

  0005e	48 ff c1	 inc	 rcx
  00061	48 83 c0 04	 add	 rax, 4
  00065	48 81 f9 00 01
	00 00		 cmp	 rcx, 256		; 00000100H
  0006c	7c ea		 jl	 SHORT $LL4@detect_dat
$LN15@detect_dat:

; 1141 :             return Z_TEXT;
; 1142 : 
; 1143 :     /* There are no "black-listed" or "white-listed" bytes:
; 1144 :      * this stream either is empty or has tolerated ("gray-listed") bytes only.
; 1145 :      */
; 1146 :     return Z_BINARY;

  0006e	33 c0		 xor	 eax, eax

; 1147 : }

  00070	c3		 ret	 0
$LN5@detect_dat:

; 1138 :         return Z_TEXT;

  00071	b8 01 00 00 00	 mov	 eax, 1

; 1147 : }

  00076	c3		 ret	 0
detect_data_type ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\workdir\c++source\zlib128\zlib-1.2.8\trees.c
;	COMDAT bi_reverse
_TEXT	SEGMENT
code$ = 8
len$ = 16
bi_reverse PROC						; COMDAT

; 1158 :     register unsigned res = 0;

  00000	33 c0		 xor	 eax, eax
$LL3@bi_reverse:

; 1159 :     do {
; 1160 :         res |= code & 1;

  00002	44 8b c1	 mov	 r8d, ecx

; 1161 :         code >>= 1, res <<= 1;
; 1162 :     } while (--len > 0);

  00005	ff ca		 dec	 edx
  00007	d1 e9		 shr	 ecx, 1
  00009	41 83 e0 01	 and	 r8d, 1
  0000d	41 0b c0	 or	 eax, r8d
  00010	03 c0		 add	 eax, eax
  00012	85 d2		 test	 edx, edx
  00014	7f ec		 jg	 SHORT $LL3@bi_reverse

; 1163 :     return res >> 1;

  00016	d1 e8		 shr	 eax, 1

; 1164 : }

  00018	c3		 ret	 0
bi_reverse ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\workdir\c++source\zlib128\zlib-1.2.8\trees.c
;	COMDAT bi_flush
_TEXT	SEGMENT
s$ = 8
bi_flush PROC						; COMDAT

; 1172 :     if (s->bi_valid == 16) {

  00000	8b 81 14 17 00
	00		 mov	 eax, DWORD PTR [rcx+5908]
  00006	4c 8b c9	 mov	 r9, rcx
  00009	83 f8 10	 cmp	 eax, 16
  0000c	75 3e		 jne	 SHORT $LN3@bi_flush

; 1173 :         put_short(s, s->bi_buf);

  0000e	0f b6 81 10 17
	00 00		 movzx	 eax, BYTE PTR [rcx+5904]
  00015	44 8b 41 28	 mov	 r8d, DWORD PTR [rcx+40]
  00019	48 8b 51 10	 mov	 rdx, QWORD PTR [rcx+16]
  0001d	41 88 04 10	 mov	 BYTE PTR [r8+rdx], al
  00021	ff 41 28	 inc	 DWORD PTR [rcx+40]
  00024	8b 51 28	 mov	 edx, DWORD PTR [rcx+40]
  00027	41 0f b6 81 11
	17 00 00	 movzx	 eax, BYTE PTR [r9+5905]
  0002f	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00033	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00036	41 ff 41 28	 inc	 DWORD PTR [r9+40]

; 1174 :         s->bi_buf = 0;

  0003a	33 c0		 xor	 eax, eax

; 1175 :         s->bi_valid = 0;

  0003c	41 89 81 14 17
	00 00		 mov	 DWORD PTR [r9+5908], eax

; 1178 :         s->bi_buf >>= 8;

  00043	66 41 89 81 10
	17 00 00	 mov	 WORD PTR [r9+5904], ax

; 1180 :     }
; 1181 : }

  0004b	c3		 ret	 0
$LN3@bi_flush:

; 1176 :     } else if (s->bi_valid >= 8) {

  0004c	83 f8 08	 cmp	 eax, 8
  0004f	7c 2e		 jl	 SHORT $LN1@bi_flush

; 1177 :         put_byte(s, (Byte)s->bi_buf);

  00051	8b 51 28	 mov	 edx, DWORD PTR [rcx+40]
  00054	41 0f b6 81 10
	17 00 00	 movzx	 eax, BYTE PTR [r9+5904]
  0005c	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00060	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 1178 :         s->bi_buf >>= 8;

  00063	41 0f b6 81 11
	17 00 00	 movzx	 eax, BYTE PTR [r9+5905]
  0006b	41 ff 41 28	 inc	 DWORD PTR [r9+40]

; 1179 :         s->bi_valid -= 8;

  0006f	41 83 81 14 17
	00 00 f8	 add	 DWORD PTR [r9+5908], -8
  00077	66 41 89 81 10
	17 00 00	 mov	 WORD PTR [r9+5904], ax
$LN1@bi_flush:

; 1180 :     }
; 1181 : }

  0007f	c3		 ret	 0
bi_flush ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\workdir\c++source\zlib128\zlib-1.2.8\trees.c
;	COMDAT bi_windup
_TEXT	SEGMENT
s$ = 8
bi_windup PROC						; COMDAT

; 1189 :     if (s->bi_valid > 8) {

  00000	8b 81 14 17 00
	00		 mov	 eax, DWORD PTR [rcx+5908]
  00006	4c 8b c9	 mov	 r9, rcx
  00009	83 f8 08	 cmp	 eax, 8
  0000c	7e 1f		 jle	 SHORT $LN3@bi_windup

; 1190 :         put_short(s, s->bi_buf);

  0000e	44 8b 41 28	 mov	 r8d, DWORD PTR [rcx+40]
  00012	0f b6 81 10 17
	00 00		 movzx	 eax, BYTE PTR [rcx+5904]
  00019	48 8b 51 10	 mov	 rdx, QWORD PTR [rcx+16]
  0001d	41 88 04 10	 mov	 BYTE PTR [r8+rdx], al
  00021	ff 41 28	 inc	 DWORD PTR [rcx+40]
  00024	0f b6 81 11 17
	00 00		 movzx	 eax, BYTE PTR [rcx+5905]
  0002b	eb 0c		 jmp	 SHORT $LN6@bi_windup
$LN3@bi_windup:

; 1191 :     } else if (s->bi_valid > 0) {

  0002d	85 c0		 test	 eax, eax
  0002f	7e 16		 jle	 SHORT $LN1@bi_windup

; 1192 :         put_byte(s, (Byte)s->bi_buf);

  00031	41 0f b6 81 10
	17 00 00	 movzx	 eax, BYTE PTR [r9+5904]
$LN6@bi_windup:
  00039	8b 51 28	 mov	 edx, DWORD PTR [rcx+40]
  0003c	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00040	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00043	41 ff 41 28	 inc	 DWORD PTR [r9+40]
$LN1@bi_windup:

; 1193 :     }
; 1194 :     s->bi_buf = 0;

  00047	33 c0		 xor	 eax, eax
  00049	66 41 89 81 10
	17 00 00	 mov	 WORD PTR [r9+5904], ax

; 1195 :     s->bi_valid = 0;

  00051	41 89 81 14 17
	00 00		 mov	 DWORD PTR [r9+5908], eax

; 1196 : #ifdef DEBUG
; 1197 :     s->bits_sent = (s->bits_sent+7) & ~7;
; 1198 : #endif
; 1199 : }

  00058	c3		 ret	 0
bi_windup ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\workdir\c++source\zlib128\zlib-1.2.8\trees.c
;	COMDAT copy_block
_TEXT	SEGMENT
s$ = 48
buf$ = 56
len$ = 64
header$dead$ = 72
copy_block PROC						; COMDAT

; 1210 : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	45 8b d8	 mov	 r11d, r8d
  00009	48 8b da	 mov	 rbx, rdx
  0000c	4c 8b d1	 mov	 r10, rcx

; 1211 :     bi_windup(s);        /* align on byte boundary */

  0000f	e8 00 00 00 00	 call	 bi_windup

; 1212 : 
; 1213 :     if (header) {
; 1214 :         put_short(s, (ush)len);

  00014	41 8b 4a 28	 mov	 ecx, DWORD PTR [r10+40]
  00018	49 8b 42 10	 mov	 rax, QWORD PTR [r10+16]
  0001c	44 88 1c 01	 mov	 BYTE PTR [rcx+rax], r11b
  00020	41 ff 42 28	 inc	 DWORD PTR [r10+40]
  00024	45 8b 4a 28	 mov	 r9d, DWORD PTR [r10+40]
  00028	49 8b 42 10	 mov	 rax, QWORD PTR [r10+16]
  0002c	41 0f b7 cb	 movzx	 ecx, r11w
  00030	66 c1 e9 08	 shr	 cx, 8
  00034	41 88 0c 01	 mov	 BYTE PTR [r9+rax], cl
  00038	41 ff 42 28	 inc	 DWORD PTR [r10+40]
  0003c	41 8b 52 28	 mov	 edx, DWORD PTR [r10+40]

; 1215 :         put_short(s, (ush)~len);

  00040	49 8b 42 10	 mov	 rax, QWORD PTR [r10+16]
  00044	41 0f b6 cb	 movzx	 ecx, r11b
  00048	f6 d1		 not	 cl
  0004a	88 0c 02	 mov	 BYTE PTR [rdx+rax], cl
  0004d	41 ff 42 28	 inc	 DWORD PTR [r10+40]
  00051	41 8b 52 28	 mov	 edx, DWORD PTR [r10+40]
  00055	49 8b 42 10	 mov	 rax, QWORD PTR [r10+16]
  00059	41 0f b7 cb	 movzx	 ecx, r11w
  0005d	66 f7 d1	 not	 cx
  00060	66 c1 e9 08	 shr	 cx, 8
  00064	88 0c 02	 mov	 BYTE PTR [rdx+rax], cl
  00067	41 ff 42 28	 inc	 DWORD PTR [r10+40]
  0006b	45 8b 42 28	 mov	 r8d, DWORD PTR [r10+40]

; 1216 : #ifdef DEBUG
; 1217 :         s->bits_sent += 2*16;
; 1218 : #endif
; 1219 :     }
; 1220 : #ifdef DEBUG
; 1221 :     s->bits_sent += (ulg)len<<3;
; 1222 : #endif
; 1223 :     while (len--) {

  0006f	45 85 db	 test	 r11d, r11d
  00072	74 2a		 je	 SHORT $LN7@copy_block
  00074	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL2@copy_block:

; 1224 :         put_byte(s, *buf++);

  00080	0f b6 03	 movzx	 eax, BYTE PTR [rbx]
  00083	49 8b 4a 10	 mov	 rcx, QWORD PTR [r10+16]
  00087	41 8b d0	 mov	 edx, r8d
  0008a	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  0008d	41 ff 42 28	 inc	 DWORD PTR [r10+40]
  00091	45 8b 42 28	 mov	 r8d, DWORD PTR [r10+40]
  00095	48 8d 5b 01	 lea	 rbx, QWORD PTR [rbx+1]
  00099	41 ff cb	 dec	 r11d
  0009c	75 e2		 jne	 SHORT $LL2@copy_block
$LN7@copy_block:

; 1225 :     }
; 1226 : }

  0009e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a2	5b		 pop	 rbx
  000a3	c3		 ret	 0
copy_block ENDP
_TEXT	ENDS
END
